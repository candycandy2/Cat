// component JS
//
// variable, function, page event for All APP
//
// appSecretKey => set in QPlayAPI.js under specific APP
//

var serverURL = "https://qplay.benq.com"; // Production API Server
var appApiPath = "qplayApi";
var qplayAppKey = "appqplay";
var download_url = "";
var QMessageKey = "1dd3ebb8bb12f1895b4a5e25";
var QMessageSecretKey = "4a9664f480e6c206469617a9";

if (window.localStorage.getItem("appKey") !== null) {
    appKey = window.localStorage.getItem("appKey");
    serverURL = window.localStorage.getItem("serverURL");
    qplayAppKey = window.localStorage.getItem("qplayAppKey");
}

var qplaySecretKey = "swexuc453refebraXecujeruBraqAc4e";
var appEnvironment = "";
var browserLanguage;
var langStr = {};
var logFileName;

var loginData = {
    company: "",
    versionName: "",
    versionCode: "",
    deviceType: "",
    pushToken: "",
    token: "",
    token_valid: "",
    uuid: "",
    checksum: "",
    domain: "",
    emp_no: "",
    loginid: "",
    messagecontent: null,
    msgDateFrom: null, //timestamp, latest time of update message from server
    doLoginDataCallBack: false,
    openMessage: false
};
var queryData = {};
var getDataFromServer = false;
var popupID;
var callHandleOpenURL = false;
var doInitialSuccess = false;
var checkTimerCount = 0;
var doHideInitialPage = false;
var initialNetworkDisconnected = false;
var showNetworkDisconnected = false;
var reStartAPP = false;
var appInitialFinish = false;
var messageRowId;
var closeInfoMsgInit = false; // let closeInfoMsg click event init once
var isOfflineEventTimeout = null;

/********************************** Corodva APP initial *************************************/
var app = {
    // Application Constructor
    initialize: function() {

        loadStringTable();

        //For release
        this.bindEvents();
    },
    // Bind Event Listeners
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    onDeviceReady: function() {

        window.sessionStorage.clear();
        app.receivedEvent('deviceready');

        //Ignore the font-size setting in Mobile Device
        if (window.MobileAccessibility) {
            window.MobileAccessibility.usePreferredTextZoom(false);
        }

        //cordova.plugins.backgroundMode.setEnabled(true);

        //Add Event to Check Network Status
        window.addEventListener("offline", function(e) {
            //review by alan
            //checkNetwork();
            //delay 10 seconds and then call checkNetwork()
            if (isOfflineEventTimeout != null) {
                clearTimeout(isOfflineEventTimeout);
                isOfflineEventTimeout = null;
            }
            isOfflineEventTimeout = setTimeout(function() {
                if (isOfflineEventTimeout != null) {
                    isOfflineEventTimeout = null;
                }
                checkNetwork();
            }, 10000);
        });

        window.addEventListener("online", function(e) {
            if (isOfflineEventTimeout != null) {
                clearTimeout(isOfflineEventTimeout);
                isOfflineEventTimeout = null;
            }
            checkNetwork();
        });

        //When open APP, need to check Network at first step
        checkNetwork();

        //Set openMessage at first time
        if (window.localStorage.getItem("openMessage") === null) {
            //check data exit in Local Storage
            window.localStorage.setItem("openMessage", "false");
        }

        //[Android] Handle the back button, set in index.js
        document.addEventListener("backbutton", onBackKeyDown, false);

        //Handle APP background event, set in index.js
        document.addEventListener("pause", onPause, false);

        //Handle APP foreground event, set in index.js
        document.addEventListener("resume", onResume, false);

        //[device] data ready to get on this step.
        setTimeout(function() {
            readConfig();
            addPlugin();

            if (appKey === qplayAppKey) {
                //动态载入widget.js
                var script = document.createElement("script");
                script.type = "text/javascript";
                script.src = serverURL + "/widget/widget.js";
                document.head.appendChild(script);

                var link = document.createElement("link");
                link.rel = "stylesheet";
                link.type = "text/css";
                link.href = serverURL + "/widget/widget.css";
                document.head.appendChild(link);
            }
        }, 0);

        //for touch overflow content Enabled
        $.mobile.touchOverflowEnabled = true;

        if (device.platform === "iOS") {
            $.mobile.hashListeningEnabled = false;
        }

        //Log -
        //get now year + month
        var now = new Date();
        logFileName = now.yyyymm("");
        //console.log(cordova.file);
        //LogFile.checkOldFile();
    },
    onGetRegistradionID: function(data) {
        if (data.length !== 0) {

            loginData["deviceType"] = device.platform;
            loginData["pushToken"] = data;
            window.localStorage.setItem("deviceType", device.platform);
            window.localStorage.setItem("pushToken", data);

            if (window.stopCheck != undefined) {
                window.stopCheck();
            }

            var checkAppVer = new checkAppVersion();
        } else {
            console.log("GetRegistradionID--------null");
            checkTimerCount++;

            //Show viewGetQPush
            $("#viewGetQPush").addClass("ui-page ui-page-theme-a ui-page-active");
            $("#viewInitial").removeClass("ui-page ui-page-theme-a ui-page-active");

            // set need to qpush's layout when landscape
            if (window.orientation === 90 || window.orientation === -90)
                $('.main-GetQPush').css('top', (screen.height - $('.main-GetQPush').height()) / 4);

            //review by alan
            if (checkTimerCount >= 90) { //Sometimes, it will be over 90 seconds
                //stopCheck();//keep to GetRegistradionID in the background
                $("#viewGetQPush").removeClass("ui-page ui-page-theme-a ui-page-active");
                $("#viewMaintain").addClass("ui-page ui-page-theme-a ui-page-active");
            }
        }
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {

    }
};

app.initialize();

function loadStringTable() {
    //Browser default language, according to the mobile device language setting
    //navigator.language: en-US / zh-CN / zh-TW
    //note:
    //1. All english country(ex: en-ln, en-ph, en-nz ...), use "en-us"
    //2. If Browser default language not exist in /string , use APP default language "zh-tw"
    browserLanguage = navigator.language.toLowerCase();
    var languageShortName = browserLanguage.substr(0, 2);

    if (languageShortName === "en") {
        browserLanguage = "en-us";
    }

    $.getJSON("string/" + browserLanguage + ".json", function(data) {
            //language string exist
            getLanguageString();
        })
        .fail(function() {
            //language string does not exist
            browserLanguage = "en-us";
            getLanguageString();
        });
};

/********************************** jQuery Mobile Event *************************************/
$(document).one("pagebeforecreate", function() {

    $(':mobile-pagecontainer').html("");

    //For QPlay Plugin
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "plugin/config.js";
    document.head.appendChild(script);

    //According to the data [pageList] which set in index.js ,
    //add View template into index.html
    $.map(pageList, function(value, key) {
        (function(pageID) {
            $.get("View/" + pageID + ".html", function(data) {
                $.mobile.pageContainer.append(data);
                $("#" + pageID).page().enhanceWithin();

                //Show Water Mark
                //According to the data [waterMarkPageList] which set in index.js
                if (!(typeof waterMarkPageList === "undefined")) {
                    if (waterMarkPageList.indexOf(pageID) !== -1) {
                        $("#" + pageID).css("background-color", "transparent");
                    }
                }
            }, "html");
        }(value));
    });


    setTimeout(function() {
        //According to the data [pageList] which set in index.js ,
        //add Page JS into index.html
        $.map(pageList, function(value, key) {
            (function(pageID) {
                /*
                var s = document.createElement("script");
                s.type = "text/javascript";
                s.src = "js/" + pageID + ".js";
                $("head").append(s);
                */

                var script = document.createElement("script");
                // onload fires even when script fails loads with an error.
                //script.onload = onload;
                // onerror fires for malformed URLs.
                //script.onerror = onerror;
                script.type = "text/javascript";
                script.src = "js/" + pageID + ".js";
                document.head.appendChild(script);
            }(value));
        });
    }, 100);

    //For APP scrolling in [Android ver:5], set CSS
    //For font-family, set diff in iOS/Android
    $(document).on("pageshow", function() {
        if (device.platform === "Android") {
            $(".ui-mobile .ui-page-active").css("overflow-x", "hidden");
            $(".ui-header-fixed").css("position", "fixed");

            var version = device.version.substr(0, 1);
            if (version === "6") {
                $(".ui-footer-fixed").css("position", "fixed");
            }
            $("body, input, select, textarea, button, .ui-btn").css("font-family", "Microsoft JhengHei");
        } else if (device.platform === "iOS") {
            if (checkiPhoneX()) {
                $('.page-header').addClass('ios-fix-overlap-iX');
                $('.ios-fix-overlap-div').css('background-color', '#492f7f');
                $('.ios-fix-overlap-div').css('height', '30px');
                StatusBar.styleLightContent();
            } else {
                $('.page-header').addClass('ios-fix-overlap');
                StatusBar.styleDefault();
            }
            $('.ios-fix-overlap-div').css('display', 'block');

            $('.ui-page:not(#viewInitial)').addClass('ui-page-ios');
            $("body, input, select, textarea, button, .ui-btn").css("font-family", "Heiti TC");
        }

        adjustPageMarginTop();

        // tab title, open version, uuid window
        $(".ui-title").on("taphold", function() {
            //Set for iOS, control text select
            document.documentElement.style.webkitTouchCallout = "none";
            document.documentElement.style.webkitUserSelect = "none";

            infoMessage();
        });

        // close ifo msg init
        if (!closeInfoMsgInit) {
            $(document).on('click', '#infoMsg #closeInfoMsg', function() {
                $('#infoMsg').popup('close');
                $('#infoMsg').hide();
            });
            closeInfoMsgInit = true;
        }
    });

    //For Message Content, click link to open APP by Scheme
    $(document).on("click", "a", function(event) {
        if ($(this).prop("href") != null) {
            var id = $(this).prop("id");
            var href = $(this).prop("href");
            var hrefStart = href.substr(0, 3);

            if (hrefStart === "app") {
                if (id !== "schemeLink") {
                    event.preventDefault();
                    openAPP(href);
                }
            } else if (href.indexOf('http://') !== -1 || href.indexOf('https://') !== -1) {
                event.preventDefault();
                cordova.InAppBrowser.open(href, '_system', 'location=yes');
            }
        }
    });

    window.addEventListener("onorientationchange" in window ? "orientationchange" : "resize", function() {
        if (window.orientation === 180 || window.orientation === 0) {
            /*do somrthing when device is in portraint mode*/
            if (device.platform === "iOS") {
                adjustPageMarginTop();
            }
        }
    }, false);

    //Prevent JQM sometimes will auto add CSS-class [ui-fixed-hidden] in "ui-header" & "ui-footer",
    //bind event to remove this CSS-class, to ensure the position of "ui-header" & "ui-footer" were "fixed".
    $(document).on({
        popupafterclose: function() {
            footerFixed();
        },
        click: function() {
            footerFixed();
        },
        tabsactivate: function() {
            footerFixed();
        },
        touchmove: function() {
            footerFixed();
        },
        pagebeforeshow: function() {
            if (loginData.uuid.length > 0 && loginData['loginid'].length > 0) {
                var appLogData = JSON.parse(localStorage.getItem('appLogData'));
                var firstPageLoad = JSON.parse(sessionStorage.getItem('firstPageLoad'));
                if (firstPageLoad == null) {
                    sessionStorage.setItem('firstPageLoad', 'true');
                    if (appLogData != null && appLogData.log_list.length > 0) {
                        var doAddAppLog = new getAddAppLog();
                    }
                }
            }
        },
        pageshow: function() {
            getAppLogParam();
        }
    });

    //iOS - Prevent header/footer position error
    $(document).on({
        touchstart: function(event) {
            footerFixed();
        },
        touchmove: function(event) {
            footerFixed();
        },
        touchend: function(event) {
            footerFixed();
        }
    }, "body");
});

/********************************** QPlay APP function *************************************/

function getAppLogParam() {
    //localStorage.clear();
    loginData["versionName"] = AppVersion.version;
    //if (loginData["versionName"].indexOf("Development") !== -1 || loginData["versionName"].indexOf("Staging") !== -1) {
    var ADAccount = loginData['loginid'];
    if (loginData.uuid.length > 0 && ADAccount.length > 0) {
        var packageName = "com.qplay." + appKey;
        var pagename = $.mobile.activePage.attr('id');
        var appLogData = JSON.parse(localStorage.getItem('appLogData'));
        var objLogList = new Object();
        if (appKey != null && pagename != null) {
            objLogList.page_name = $.mobile.activePage.attr('id');
            objLogList.page_action = "enterPage";
            objLogList.start_time = new Date().getTime();
            objLogList.period = "";
            objLogList.device_type = device.platform.toLowerCase();
            if (appLogData == null || appLogData.log_list.length == 0) {
                jsonData = {
                    login_id: ADAccount,
                    package_name: packageName,
                    log_list: [objLogList]
                };
            } else if (objLogList.page_name == appLogData.log_list[appLogData.log_list.length - 1].page_name) {
                appLogData.login_id = ADAccount;
                appLogData.package_name = packageName;
                appLogData.log_list.push(objLogList);
                jsonData = appLogData;
            } else {
                appLogData.login_id = ADAccount;
                appLogData.package_name = packageName;
                var pagePeriod = objLogList.start_time - appLogData.log_list[appLogData.log_list.length - 1].start_time;
                appLogData.log_list[appLogData.log_list.length - 1].period = pagePeriod;
                appLogData.log_list.push(objLogList);
                jsonData = appLogData;
            }
            localStorage.setItem('appLogData', JSON.stringify(jsonData));
        }
    }
    //}
}

function onPause() {
    if (loginData.uuid.length > 0 && loginData['loginid'].length > 0) {
        var appLogData = JSON.parse(window.localStorage.getItem('appLogData'));
        if (appLogData != null && appLogData.log_list.length > 0) {
            var onPauseTime = new Date().getTime();
            var pagePeriod = onPauseTime - appLogData.log_list[appLogData.log_list.length - 1].start_time;
            appLogData.log_list[appLogData.log_list.length - 1].period = pagePeriod;
            jsonData = appLogData;
            window.localStorage.setItem('appLogData', JSON.stringify(jsonData));
            var doAddAppLog = new getAddAppLog();
        }
    }
}

function onResume() {
    getAppLogParam();
}

function getAddAppLog() {

    var self = this;
    var appLogData = JSON.parse(localStorage.getItem('appLogData'));
    var queryData = JSON.stringify(appLogData);

    this.successCallback = function(data) {

        var resultcode = data['result_code'];
        var logDataLength = appLogData.log_list.length;
        if (resultcode == 1) {
            for (var i = 0; i < logDataLength; i++) {
                appLogData.log_list.shift();
            }
            localStorage.setItem('appLogData', JSON.stringify(appLogData));
        }
    }

    this.failCallback = function(data) {};

    var __construct = function() {
        loginData["versionName"] = AppVersion.version;
        //if (loginData["versionName"].indexOf("Development") !== -1 || loginData["versionName"].indexOf("Staging") !== -1) {
        //QPlayAPIEx("POST", "addAppLog", self.successCallback, self.failCallback, queryData, "", "low", 1000);
        //}
    }();

}

//review by alan
//Check if Token Valid is less than 1 hour || expired || invalid || not exist
function checkTokenValid(resultCode, tokenValid, successCallback, data) {

    var checkTokenValidResult = false;
    successCallback = successCallback || null;
    tokenValid = tokenValid || null;
    data = data || null;

    resultCode = resultCode.toString();

    if (resultCode === "000907") {
        //token expired
        getServerData();
    } else if (resultCode === "000908") {
        //token invalid
        getServerData();
    } else if (resultCode === "000911") {
        //uuid not exist
        getServerData();
    } else if (resultCode === "000914") {
        //User Account Suspended
        openAPIError("suspended");
    } else {

        //Other APP
        //errorCodeArray set in APP's index.js
        if (!typeof errorCodeArray === "undefined") {
            if (errorCodeArray.indexOf(resultCode) !== -1) {
                openAPIError("error");
            }
        } else {

            var doSuccessCallback = false;

            //[checkAppVersion] & [logout] won't return token_valid, just do successCallback
            if (tokenValid == null) {
                doSuccessCallback = true;
            } else {
                //Other Result code from API, show [Please contact ITS]
                var resultCodeStart = resultCode.substr(0, 3);

                if (resultCodeStart === "999") {
                    openAPIError("error");
                } else {
                    //Each [Success] case
                    var clientTimestamp = new Date().getTime();
                    clientTimestamp = clientTimestamp.toString().substr(0, 10);

                    if (parseInt(tokenValid - clientTimestamp, 10) < 60 * 60) {
                        //Only QPlay can do re-new Token, other APP must open QPlay to do this work.
                        if (appKey === qplayAppKey) {
                            reNewToken();
                        } else {
                            getServerData();
                        }
                    } else {
                        if (doInitialSuccess) {
                            doInitialSuccess = false;
                            hideInitialPage();
                        } else {
                            doSuccessCallback = true;
                            checkTokenValidResult = true;
                        }
                    }
                }
            }

            if (doSuccessCallback) {
                if (typeof successCallback === "function") {
                    successCallback(data);
                }
            }
        }
    }

    return checkTokenValidResult;
}

function readConfig() {

    loginData["versionName"] = AppVersion.version;
    loginData["versionCode"] = AppVersion.build;

    //set in Local Storage
    if (window.localStorage.getItem("appKey") === null) {
        //according to the versionName, change the appKey
        if (loginData["versionName"].indexOf("Staging") !== -1) {
            appEnvironment = "test";
            appKey = appKeyOriginal + "test";
            serverURL = "https://qplaytest.benq.com"; // Staging API Server
            qplayAppKey = qplayAppKey + "test";
        } else if (loginData["versionName"].indexOf("Development") !== -1) {
            appEnvironment = "dev";
            appKey = appKeyOriginal + "dev";
            serverURL = "https://qplaydev.benq.com"; // Development API Server
            qplayAppKey = qplayAppKey + "dev";
        } else {
            appEnvironment = "";
            appKey = appKeyOriginal + "";
            serverURL = "https://qplay.benq.com"; // Production API Server
            qplayAppKey = qplayAppKey + "";
        }

        window.localStorage.setItem("appKey", appKey);
        window.localStorage.setItem("serverURL", serverURL);
        window.localStorage.setItem("qplayAppKey", qplayAppKey);
    }

    //JMessage Config
    if (loginData["versionName"].indexOf("Staging") !== -1) {
        QMessageKey = "33938c8b001b601c1e647cbd";
        QMessageSecretKey = "aa15c71a5071f539240b5c83";
    } else if (loginData["versionName"].indexOf("Development") !== -1) {
        QMessageKey = "e343504d536ebce16b70167e";
        QMessageSecretKey = "62f87cad6de67db6c968ba50";
    }

    //QPlay need to get PushToken in the first step, else cannot do any continue steps.
    if (appKey === qplayAppKey) {

        //Every Time after Device Ready, need to do QPush init()
        //If simulator, can't get push token
        if (!device.isVirtual) {
            //初始化JPush
            if (device.platform === "iOS") {
                window.plugins.jPushPlugin.init();
            } else {
                window.plugins.QPushPlugin.init();
            }
        }

        //If pushToken exist in Local Storage, don't need to get new one.
        if (window.localStorage.getItem("pushToken") === null) {

            //If simulator, can't get push token
            if (device.isVirtual) {
                app.onGetRegistradionID(device.uuid);
            } else {
                window.checkTimer = setInterval(function() {

                    if (device.platform === "iOS") {
                        window.plugins.jPushPlugin.getRegistrationID(app.onGetRegistradionID);
                    } else {
                        window.plugins.QPushPlugin.getRegistrationID(app.onGetRegistradionID);
                    }
                }, 1000);

                window.stopCheck = function() {
                    if (window.checkTimer != null) {
                        clearInterval(window.checkTimer);
                        window.checkTimer = null;
                    }
                };
            }

        } else {
            loginData["deviceType"] = device.platform;
            loginData["pushToken"] = window.localStorage.getItem("pushToken");

            var checkAppVer = new checkAppVersion();
        }

    } else {
        var doCheckAppVer = false;

        //Check if the APP is finished update, running the latest code.
        if (window.localStorage.getItem("versionCode") === null) {
            //No, this is the first time to open this APP.
            window.localStorage.setItem("versionCode", loginData["versionCode"]);
            doCheckAppVer = true;
        } else {
            var oldVersionCode = parseInt(window.localStorage.getItem("versionCode"), 10);
            var nowVersionCode = parseInt(loginData["versionCode"], 10);

            if (nowVersionCode > oldVersionCode) {
                //Yes, APP is just finished update.
                getServerData();
                window.localStorage.setItem("versionCode", loginData["versionCode"]);
            } else {
                //No, APP have not updated.
                doCheckAppVer = true;
            }
        }

        if (doCheckAppVer) {
            var checkAppVer = new checkAppVersion();
        }
    }
}

function updateAPP(updateUrl) {

    if (device.platform === "iOS") {
        window.open(updateUrl, '_system');
    } else {
        var permissions = cordova.plugins.permissions;
        permissions.hasPermission(permissions.WRITE_EXTERNAL_STORAGE, function(status) {
            if (status.hasPermission) {

                window.AppUpdate.AppUpdateNow(onSuccess, onFail, updateUrl);

                function onFail() {}

                function onSuccess() {}
            } else {
                permissions.requestPermission(permissions.WRITE_EXTERNAL_STORAGE, success, error);

                function error() {
                    console.warn('WRITE_EXTERNAL_STORAGE permission is not turned on');
                }

                function success(status) {
                    if (status.hasPermission) {

                        window.AppUpdate.AppUpdateNow(onSuccess, onFail, updateUrl);

                        function onFail() {}

                        function onSuccess() {}
                    }
                }
            }
        });
    }
}

//API Check APP Version
function checkAppVersion() {
    var self = this;
    var queryStr = "&package_name=com.qplay." + appKey + "&device_type=" + device.platform + "&version_code=" + loginData["versionCode"];

    loadingMask("show");

    this.successCallback = function(data) {

        var resultcode = data['result_code'];

        if (resultcode == '1') {
            download_url = data['content']['download_url'];

            //1. 新增逻辑，只有QPlay允许用户选择更新
            var update_app = true;
            if (appKey == qplayAppKey) {
                //2. 新增逻辑，当新版本号为100的倍数时，强制用户更新
                var latestVersion = data['content'].version_code;
                var remainder = latestVersion % 100;

                if (typeof remainder == 'number' && remainder != 0) {
                    update_app = false;
                    window.sessionStorage.setItem('allowUpdateAPP', 'Y');
                }
            }

            if (update_app) {
                //3. 更新维持原逻辑
                // need to update app
                window.checkVerTimer = setInterval(function() {
                    $.mobile.changePage('#viewUpdateAppVersion');

                    if ($('#viewUpdateAppVersion').hasClass("ui-page-active")) {
                        $("#viewInitial").removeClass("ui-page ui-page-theme-a ui-page-active");
                        $('#viewUpdateAppVersion').removeClass("hide");
                        $("#mainUpdateAppVersion").show();

                        // set update app version's layout when landscape
                        if (window.orientation === 90 || window.orientation === -90)
                            $('.main-updateAppVersion').css('top', (screen.height - $('.main-updateAppVersion').height()) / 4);
                        stopcheckVerTimer();
                    }
                }, 1000);

                window.stopcheckVerTimer = function() {
                    clearInterval(checkVerTimer);

                    loadingMask("hide");
                };

                $("#UpdateAPP").on("click", function() {
                    if (appKey === qplayAppKey) {
                        //qplay
                        if (device.platform === "iOS") {
                            window.open('itms-services://?action=download-manifest&url=' + serverURL + '/qplay/public/app/1/apk/ios/manifest.plist', '_system');
                        } else { //android
                            var updateUrl = '' + serverURL + '/qplay/public/app/1/apk/android/appqplay.apk';
                            updateAPP(updateUrl);
                        }
                    } else {
                        //4. 新增逻辑，如果其他APP有widgetPage，也不用更新
                        if (download_url.indexOf('widgetPage') != -1) {
                            //popup提示
                            loadingMask("hide");

                            $('#removeToQPlay').popup();
                            $('#removeToQPlay').show();
                            $('#removeToQPlay').popup('open');

                            $('#closeRemoveMsg').on('click', function() {
                                $('#removeToQPlay').popup('close');
                            });

                        } else {
                            //Download link without QPlay
                            if (device.platform === "iOS") {
                                window.open(download_url, '_system');
                            } else { //android
                                var updateUrl = download_url;
                                updateAPP(updateUrl);
                            }
                        }
                    }
                });
            } else {
                //与000913一致
                // app is up to date
                $("#viewGetQPush").removeClass("ui-page ui-page-theme-a ui-page-active");
                var whiteList = new setWhiteList();
            }

        } else if (resultcode == '000913') {

            // app is up to date
            $("#viewGetQPush").removeClass("ui-page ui-page-theme-a ui-page-active");
            var whiteList = new setWhiteList();

            //如果QPlay已安装最新版则不用更新（每次ViewAppSetting都可调用此API，及时掌握最新版本）
            if (appKey == qplayAppKey) {
                window.sessionStorage.setItem('allowUpdateAPP', 'N');
            }

        } else if (resultcode == '999015') {

            // app apk/ipa file does not upload to QPlay.
            // This status only for Developer to skip check the version of New Create APP.
            $("#viewGetQPush").removeClass("ui-page ui-page-theme-a ui-page-active");
            var whiteList = new setWhiteList();

        } else if (resultcode == '999012') {
            // app has been removed in QPlay.
        }

    }

    this.failCallback = function(data) {};

    var __construct = function() {
        QPlayAPIEx("GET", "checkAppVersion", self.successCallback, self.failCallback, null, queryStr, "high", 30000);
    }();
}

//Plugin-QSecurity
function setWhiteList() {

    var self = this;
    loadingMask("hide");

    this.successCallback = function() {
        var doCheckStorageData = false;

        if (appKey !== qplayAppKey) {
            if (callHandleOpenURL) {
                return;
            } else {
                doCheckStorageData = true;
            }
        } else {
            doCheckStorageData = true;
        }

        if (doCheckStorageData) {
            checkStorageData();
        }

        if (device.platform === "Android") {
            $('.ui-btn span').addClass('android-fix-btn-text-middle');
        }

        if (device.platform === "iOS") {
            if (checkiPhoneX()) {
                $('.page-header').addClass('ios-fix-overlap-iX');
                $('.ios-fix-overlap-div').css('background-color', '#492f7f');
                $('.ios-fix-overlap-div').css('height', '30px');
                StatusBar.styleLightContent();
            } else {
                $('.page-header').addClass('ios-fix-overlap');
                StatusBar.styleDefault();
            }
            $('.ios-fix-overlap-div').css('display', 'block');
        }
    };

    this.failCallback = function() {};

    var __construct = function() {
        if (device.platform !== "iOS") {
            if (appKey === qplayAppKey) {
                var securityList = {
                    level: 2,
                    Navigations: [
                        "https://qplaytest.benq.com/*",
                        "https://qplaydev.benq.com/*",
                        "https://qplay.benq.com/*",
                        "itms-services://*"
                    ],
                    /*Intents: [
                        "itms-services:*",
                        "http:*",
                        "https:*",
                        "appyellowpage:*",
                        "tel:*",
                        "sms:*",
                        "mailto:*",
                        "geo:*"
                    ],*/
                    Intents: [
                        "https:*"
                    ],
                    Requests: [
                        "https://qplaytest.benq.com/*",
                        "https://qplaydev.benq.com/*",
                        "https://qplay.benq.com/*"
                    ]
                };
            } else {
                var securityList = {
                    level: 2,
                    Navigations: [
                        "https://qplaytest.benq.com/*",
                        "https://qplaydev.benq.com/*",
                        "https://qplay.benq.com/*",
                        "itms-services://*"
                    ],
                    /*Intents: [
                        "itms-services:*",
                        "http:*",
                        "https:*",
                        qplayAppKey + ":*",
                        "tel:*",
                        "sms:*",
                        "mailto:*",
                        "geo:*"
                    ],*/
                    Intents: [],
                    Requests: [
                        "https://qplaytest.benq.com/*",
                        "https://qplaydev.benq.com/*",
                        "https://qplay.benq.com/*"
                    ]
                };
            }

            //Sometimes window.plugins.qsecurity.setWhiteList() won't work correctly,
            //both self.successCallback & self.failCallback won't be call.
            //So, we need to call self.successCallback() directly.
            if (loginData['doLoginDataCallBack'] === true || loginData['openAppDetailPage'] === true) {
                self.successCallback();
            } else {
                window.plugins.qsecurity.setWhiteList(securityList, self.successCallback, self.failCallback);
            }
        } else {
            self.successCallback();
        }
    }();
}

//check data(token, token_value, ...) on web-storage
function checkStorageData() {

    if (window.localStorage.length === 0) {
        getDataFromServer = true;
    } else {
        //1. check loginData exist in localStorage
        var loginDataExist = processStorageData("checkLocalStorage");

        if (loginDataExist) {
            //2. if token exist, check token valid from server
            processStorageData("checkSecurityList");
        } else {
            //3. if token not exist, call QLogin / QPlay
            getDataFromServer = true;
        }
    }

    if (getDataFromServer) {
        getServerData();
    }
}

function processStorageData(action, data) {
    data = data || null;

    if (action === "checkLocalStorage") {
        var checkLoginDataExist = true;

        $.map(loginData, function(value, key) {
            if (key === "token" || key === "token_valid") {
                if (window.localStorage.getItem(key) === null) {
                    checkLoginDataExist = false;
                }
            }
        });

        return checkLoginDataExist;
    } else if (action === "checkSecurityList") {

        $.map(loginData, function(value, key) {
            if (window.localStorage.getItem(key) !== null) {
                loginData[key] = window.localStorage.getItem(key);
            }
        });

        var FunctionList = new getFunctionList();
        var securityList = new getSecurityList();
    } else if (action === "setLocalStorage") {
        $.map(data, function(value, key) {
            window.localStorage.setItem(key, value);
        });

        $.map(loginData, function(value, key) {
            if (window.localStorage.getItem(key) !== null) {
                loginData[key] = window.localStorage.getItem(key);
            }
        });

        if (appKey === qplayAppKey) {
            if (loginData['doLoginDataCallBack'] === true) {
                getLoginDataCallBack();
            } else {
                var FunctionList = new getFunctionList();
                var securityList = new getSecurityList();
            }
        }
    }

}

//QPlay => open QLogin
//Other APP => open QPlay to get Token or do QLogin
function getServerData() {

    if (appKey === qplayAppKey) {
        var args = [];
        args[0] = "initialSuccess"; //set in APP's index.js
        //args[1] = device.uuid;    //return by cordova-plugin-device
        args[1] = window.localStorage.getItem("pushToken"); //return by plugin QPush

        window.plugins.qlogin.openCertificationPage(null, null, args);
    } else {
        openAPP(qplayAppKey + "://callbackApp=" + appKey + "&action=getLoginData&versionCode=" + loginData["versionCode"]);
    }

}

//Plugin-QSecurity
//Get security of this APP, and is the First API to check token_valid
function getSecurityList() {

    var self = this;
    var queryStr = "&app_key=" + appKey;

    this.successCallback = function(data) {
        doInitialSuccess = true;
        checkTokenValid(data['result_code'], data['token_valid'], null, null);
    };

    this.failCallback = function(data) {};

    var __construct = function() {
        QPlayAPI("GET", "getSecurityList", self.successCallback, self.failCallback, null, queryStr);
    }();

}

//review by alan
function createAPPSchemeURL() {
    return "://callbackApp=" + appKey + "&action=retrunLoginData&token=" + loginData['token'] +
        "&token_valid=" + loginData['token_valid'] + "&uuid=" + loginData['uuid'] + "&checksum=" + loginData['checksum'] +
        "&domain=" + loginData['domain'] + "&emp_no=" + loginData['emp_no'] + "&loginid=" + loginData['loginid'];
}

//Return Login Data from QPlay
function getLoginDataCallBack() {

    var callBackURL = queryData["callbackApp"] + createAPPSchemeURL();
    openAPP(callBackURL);

    loginData['doLoginDataCallBack'] = false;

    $.mobile.changePage('#viewMain3', {
        reloadPage: true
    });
    $.mobile.changePage('#viewMain3');
}

//For Scheme, in iOS/Android, when open APP by Scheme, this function will be called
function handleOpenURL(url) {

    if (url !== "null") {

        callHandleOpenURL = true;

        //parse URL parameter
        var tempURL = url.split("//");
        var queryString = tempURL[1];
        var tempQueryData = queryString.split("&");
        queryData = {};

        $.map(tempQueryData, function(value, key) {
            var tempData = value.split("=");
            queryData[tempData[0]] = tempData[1];
        });

        if (appKey === qplayAppKey && queryData["action"] === "getLoginData") {

            loginData['doLoginDataCallBack'] = true;

            //APP version record
            //checkAPPVersionRecord("updateFromScheme");

        } else if (appKey === qplayAppKey && queryData["action"] === "openAppDetailPage") {

            loginData['openAppDetailPage'] = true;
            loginData['updateApp'] = true;

            //For old APP Version
            if (queryData["callbackApp"] === undefined) {
                openAppName = queryData["openAppName"];
                queryData["callbackApp"] = queryData["openAppName"];
            } else {
                openAppName = queryData["callbackApp"];
            }

            //APP version record
            //checkAPPVersionRecord("updateFromScheme");

        } else if (queryData["action"] === "retrunLoginData") {

            $.map(queryData, function(value, key) {
                if (key !== "callbackApp" && key !== "action") {
                    window.localStorage.setItem(key, value);
                    loginData[key] = value;
                }
            });

            //review by alan
            //force to check APP version
            hideInitialPage();
        } else {
            //For Other APP, which was be opened by dynamic action,
            //the specific funciton [handleOpenByScheme] need to set in APP/www/js/index.js
            if (typeof handleOpenByScheme !== "undefined") {
                if (handleOpenByScheme !== null) {
                    if (typeof handleOpenByScheme === "function") {
                        callHandleOpenURL = false;
                        handleOpenByScheme(queryData);
                    }
                }
            }
        }

        //Because Scheme work different process between [APP is in action or background] / [APP is not open],
        //[APP is in action or background] need to following step.
        if (loginData['doLoginDataCallBack'] === true) {
            $("#viewInitial").addClass("ui-page ui-page-theme-a ui-page-active");
            $("#viewMain3").removeClass("ui-page ui-page-theme-a ui-page-active");

            if (appInitialFinish === true) {
                var checkAppVer = new checkAppVersion();
            }
        }

        if (loginData['openAppDetailPage'] === true) {
            if (appInitialFinish === true) {
                var checkAppVer = new checkAppVersion();
            }
        }

    } else {
        if (appKey !== qplayAppKey) {
            checkStorageData();
        }
    }

}
function addDownloadHit(appname_) {
    var self = this;

    this.successCallback = function(data) {
        var resultcode = data['result_code'];
        if (resultcode == 1) {} else {}
    };

    this.failCallback = function(data) {
        var resultcode = data['result_code'];
        if (resultcode == 1) {} else {}
    };

    var __construct = function() {
        var queryStr = "&login_id=" + loginData.loginid + "&package_name=" + appname_;
        QPlayAPI("GET", "addDownloadHit", self.successCallback, self.failCallback, null, queryStr);
        window.sessionStorage.setItem('addDownloadHitDirty', 'Y');
    }();
}
/************************************************************************************************/
/********************************** APP Process JS function *************************************/
/************************************************************************************************/
var closeDisconnectNetworkInit = false, // let closeDisconnectNetwork click event init once
    isDisConnect = false; // check if disconnect


function getLanguageString() {
    var i;
    $.getJSON("string/" + browserLanguage + ".json", function(data) {
        for (i = 0; i < data.length; i++) {
            langStr[data[i].term] = data[i].definition.trim();
        }
    });

    //review by allen
    if (appKey === qplayAppKey) {
        $.getJSON(serverURL + "/widget/string/" + browserLanguage + ".json", function(data) {
            for (i = 0; i < data.length; i++) {
                langStr[data[i].term] = data[i].definition.trim();
            }
        });
    }

    $.getJSON("string/common_" + browserLanguage + ".json", function(data) {
        $.getJSON("string/common_" + browserLanguage + ".json", function(data) {
            for (i = 0; i < data.length; i++) {
                langStr[data[i].term] = data[i].definition.trim();
            }
        });

        addComponentView();
    });
}

function addComponentView() {
    //review by allen: don't initial twice
    if ($('#viewInitial').length == 0) {

        //add component view template into index.html
        $.get("View/APP.html", function(data) {
            $.mobile.pageContainer.append(data);

            //Set viewInitial become the index page
            $("#viewInitial").page().enhanceWithin();
            $("#viewInitial").addClass("ui-page ui-page-theme-a ui-page-active");

            //set initial page's layout when landscape
            $('#initialOther').css('top', (screen.height - $('#initialOther').height()) / 2);

            $("#APPLoginLink").on("click", function() {
                getServerData();
            });
            //If is other APP, set APP name in initial page
            if (appKey !== qplayAppKey) {
                $("#initialAppName").html(initialAppName);

                //set Other APP initial page dispaly
                $("#initialOther").removeClass("hide");
                $("#initialQPlay").remove();
                //when initialOther Page stay over 10 secs, show QPlay Login Link
                setTimeout(function() {
                    $("#initialAppLoginTimeout").removeClass("hide");
                }, 10000);
            } else {
                //set QPlay initial page dispaly
                $("#initialQPlay").removeClass("hide");
                $("#initialOther").remove();
            }

            //viewNotSignedIn, Login Again
            $("#LoginAgain").on("click", function() {
                //$("#viewNotSignedIn").removeClass("ui-page ui-page-theme-a ui-page-active");
                var checkAppVer = new checkAppVersion();
            });

            //UI Popup : Event Add Confirm
            var disconnectNetworkData = {
                id: "disconnectNetwork",
                content: $("template#tplDisconnectNetwork").html()
            };

            tplJS.Popup(null, null, "append", disconnectNetworkData);

            var removeToQPlayData = {
                id: "removeToQPlay",
                content: $("template#tplRemoveToQPlay").html()
            };

            tplJS.Popup(null, null, "append", removeToQPlayData);

            //After all template load finished, processing language string
            $(".langStr").each(function(index, element) {
                var id = $(element).data("id");
                if (typeof langStr[id] !== 'undefined') {
                    $(this).html(langStr[id]);
                }
            });

            overridejQueryFunction();

        }, "html");
    }
}

//Check Mobile Device Network Status
function checkNetwork(data) {

    data = data || null;
    //A. If the device's Network is disconnected, show dialog only once, before the network is connect again.
    //B. If the device's Network is disconnected again, do step 1. again.

    //Only Android can get this info, iOS can not!!
    //connect.type:
    //1. wifi
    //2. cellular > 3G / 4G
    //3. none
    var showMsg = false;
    var logMsg = "";

    if (!navigator.onLine) {
        //----Network disconnected
        loadingMask("hide");

        if (!initialNetworkDisconnected) {
            showMsg = true;
            initialNetworkDisconnected = true;
        }

        if (!showNetworkDisconnected) {
            showMsg = true;
            showNetworkDisconnected = true;
        }

        isDisConnect = true;

        logMsg = "Network disconnected";
    } else {
        var activePage = $.mobile.pageContainer.pagecontainer("getActivePage"),
            activePageID = activePage[0].id,
            activatePageIndex = activePage.index('.ui-page');
        //----Network connected
        // on initial page, should reload app
        if (activePageID === 'viewInitial' || activatePageIndex === -1) {
            reStartAPP = true;
        } else {
            // do nothing
        }
    }

    if (showMsg) {
        openNetworkDisconnectWindow('noNetwork');
    }

    if (logMsg.length > 0) {
        var dataArr = [
            "Network Error",
            "",
            logMsg
        ];
        //LogFile.createAndWriteFile(dataArr);
    }
}

function openNetworkDisconnectWindow(status) {
    // closeDisconnectNetwork click event should init only once
    if (!closeDisconnectNetworkInit) {
        $(document).on('click', '#disconnectNetwork #closeInfoMsg', function() {
            $('#disconnectNetwork').popup('close');

            // network disconnect
            if (status === 'noNetwork') {
                setTimeout(function() {
                    checkNetwork();
                }, 500);
            }
            // API return fail: timeout or error
            else if (status === 'timeout' || status === 'error') {
                var activePage = $.mobile.pageContainer.pagecontainer("getActivePage"),
                    activePageID = activePage[0].id,
                    activatePageIndex = activePage.index('.ui-page');

                // on initial page, should reload app
                if (activePageID === 'viewInitial' || activatePageIndex === -1) {
                    reStartAPP = true;
                }
                // on page 1
                else if (activatePageIndex === 0) {
                    // no page can return, do nothing
                }
                // on other page, back to last page
                else {
                    onBackKeyDown();
                }
                loadingMask("hide");
            }
            // API retun fail that we never seen before
            else {
                alert('網路連線失敗，' + status);
                reStartAPP = true;
            }

            showNetworkDisconnected = false;
            if (reStartAPP) {
                reStartAPP = false;
                location.reload();
            }
        });
        closeDisconnectNetworkInit = true;
    }

    $('#disconnectNetwork').popup();
    $('#disconnectNetwork').show();
    $('#disconnectNetwork').popup('open');
}

function errorHandler(data, requestAction) {
    console.log('readyState: ' + data.readyState + ' status: ' + data.status + ' statusText: ' + data.statusText);
    //1. status = timeout (Network status display ["canceled"])
    if (data.statusText === "timeout") {
        showNetworkDisconnected = true;
        logMsg = "Network status=canceled, timeout";
        openNetworkDisconnectWindow('timeout');
    }
    //2. status = error (Network status display ["failed"]) as we know, the error will appear when network is disconnect
    else if (data.statusText === 'error') {
        showNetworkDisconnected = true;
        logMsg = "Network status=failed, error";
        openNetworkDisconnectWindow('error');
    }
    // 3. status that we never seen before
    else {
        //status == 500, Text = internal Server Error
        showNetworkDisconnected = true;
        logMsg = data.statusText + "(status : " + data.status + ")";
        //openNetworkDisconnectWindow(logMsg);
        alert('Call ' + requestAction + ',' + logMsg);
        location.reload();
    }
}

//Taphold APP Header to show Version/AD/UUID
function infoMessage() {
    var function_list = JSON.parse(window.localStorage.getItem('FunctionData'))['function_list'];
    var account = 'N';
    if (function_list != null) {
        for (var i in function_list) {
            if (function_list[i].function_variable == 'QAccountOnly') {
                account = function_list[i].function_content.right;
                break;
            }
        }
    }
    if (account == 'Y') {
        $("#infoLoginid").html(loginData["loginid"] + '(Account)');
    } else {
        $("#infoLoginid").html(loginData["loginid"]);
    }
    //$("#infoLoginid").html(loginData["loginid"]);
    $("#infoUUID").html(loginData["uuid"]);
    $("#infoVersionName").html(loginData["versionName"]);
    $('#infoMsg').popup();
    $('#infoMsg').show();
    $('#infoMsg').popup('open');

    setTimeout(function() {
        //Set for iOS, control text select
        document.documentElement.style.webkitTouchCallout = "default";
        document.documentElement.style.webkitUserSelect = "auto";
    }, 1000);
}

//[Android]Popup > Check if popup is shown, then if User click [back] button, just hide the popup.
function checkPopupShown() {
    if ($(".ui-popup-active").length > 0) {
        popupID = $(".ui-popup-active")[0].children[0].id;
        return true;
    } else {
        popupID = "";
        return false;
    }
}

//Hide APP initial page
function hideInitialPage() {
    $("#viewInitial").removeClass("ui-page ui-page-theme-a ui-page-active");

    if (window.ga !== undefined) {
        if (loginData["versionName"].indexOf("Staging") !== -1) {
            window.ga.startTrackerWithId('UA-126559228-1', 'auto');
            window.ga.setAnonymizeIp(true);
        } else if (loginData["versionName"].indexOf("Development") !== -1) {
            window.ga.startTrackerWithId('UA-126404580-1', 'auto');
            window.ga.setAnonymizeIp(true);
        } else {
            window.ga.startTrackerWithId('UA-126570525-1', 'auto');
            window.ga.setAnonymizeIp(true);
        }
    }

    initialSuccess();
    waterMark();
}

//Use Scheme to Open APP
function openAPP(URL) {
    $("body").append('<a id="schemeLink" href="' + URL + '"></a>');
    document.getElementById("schemeLink").click();
    $("#schemeLink").remove();
}

//If API is error, open Dialog
function openAPIError(type) {
    if (type === "error") {
        $("#APIError_1").show();
        $("#APIError_2").hide();
    } else {
        $("#APIError_1").hide();
        $("#APIError_2").show();
    }

    $('#APIError').popup();
    $('#APIError').show();
    $('#APIError').popup('open');

    $("#closeAPIError").on("click", function() {
        $('#APIError').popup('close');
        $('#APIError').hide();
    });
}

//Create Signature according to appSecretKey
function getSignature(action, signatureTime) {
    if (action === "getTime") {
        return Math.round(new Date().getTime() / 1000);
    } else {
        var hash = CryptoJS.HmacSHA256(signatureTime.toString(), appSecretKey);
        return CryptoJS.enc.Base64.stringify(hash);
    }
}

function getSignatureByKey(action, signatureTime, secret) {
    if (action === "getTime") {
        return Math.round(new Date().getTime() / 1000);
    } else {
        var hash = CryptoJS.HmacSHA256(signatureTime.toString(), secret);
        return CryptoJS.enc.Base64.stringify(hash);
    }
}

var g_loadingMask_finish = true;
var g_loadingMask_Interval = null;

//Loading Mask
function loadingMask(action, name) {

    name = name || "empty";

    if (g_loadingMask_Interval == null) {
        g_loadingMask_Interval = setInterval(function() {
            if (g_loadingMask_finish == true) {
                $(".loader").hide();
            }
        }, 500);
    }
    if (action === "show") {
        var scrollHeight = $(window).scrollTop();

        if ($(".loader").length === 0) {
            $('<div class="loader" style="top:' + scrollHeight + 'px;"><img src="img/component/ajax-loader.gif"><div style="color:#FFF;">&nbsp;</div></div>').appendTo("body");
        } else {
            $(".loader").show();
            $(".loader").css("top", scrollHeight + "px");
        }
        g_loadingMask_finish = false;
        //console.log('show by ' + name);
    } else if (action === "hide") {
        g_loadingMask_finish = true;
        //console.log('hide by ' + name);
    }
}

//When receive a Message, get message_id by different path in iOS/Android
function getMessageID(data) {
    if (device.platform === "iOS") {
        messageRowId = data.Parameter;
    } else {
        messageRowId = data.extras["Parameter"];
    }
    window.localStorage.setItem("messageRowId", messageRowId);
}

//create popup message
function popupMsg(attr, title, content, btn1, btnIsDisplay, btn2, titleImg) {
    $('#viewPopupMsg').attr('for', attr);
    $('#viewPopupMsg #titleText').text(title);
    $('#viewPopupMsg #msgContent').html(content);
    $('#viewPopupMsg #titleImg').attr('src', '');
    $('#viewPopupMsg #titleImg').addClass('hide');
    $('#viewPopupMsg #cancel').text(btn1);
    $('#viewPopupMsg #confirm').text(btn2);

    if (titleImg != '') {
        $('#viewPopupMsg #titleImg').attr('src', 'img/' + titleImg);
        $('#viewPopupMsg #titleImg').removeClass('hide');
    }

    $('#viewPopupMsg').removeClass();
    $('#viewPopupMsg button').removeClass();
    if (btnIsDisplay == true) {
        $('#viewPopupMsg #cancel').removeClass('hide');
        $('#viewPopupMsg #confirm').css('width', '50%');
        $('#viewPopupMsg #confirm').css('position', 'absolute');
    } else {
        $('#viewPopupMsg #cancel').addClass('hide');
        $('#viewPopupMsg #confirm').css('width', '100%');
        $('#viewPopupMsg #confirm').css('position', 'initial');
    }
    $('#viewPopupMsg #cancel').attr('onClick', 'popupCancelClose()');

    $('#viewPopupMsg').popup(); //initialize the popup
    $('#viewPopupMsg').show();
    $('#viewPopupMsg').popup('open');
}

function popupCancelClose() {
    $('body').on('click', '#viewPopupMsg #cancel', function() {
        $('#viewPopupMsg').popup('close');
    });
}

function adjustPageMarginTop() {
    //For some APP Page, if page's header has second level [button / title],
    //auto resize the margin-top of page-main.
    var activePage = $.mobile.pageContainer.pagecontainer("getActivePage");
    var activePageID = activePage[0].id;

    if (activePageID.length !== 0) {

        var pageHeaderHeight = $("#" + activePageID + " .page-header").height();
        var headerStyleHeight = $("#" + activePageID + " .header-style").height();
        var mainMarginTop = parseInt(headerStyleHeight - pageHeaderHeight, 10);

        if (mainMarginTop < 0) {
            mainMarginTop = 0;
        }

        if (device.platform === "iOS") {
            mainMarginTop = mainMarginTop + iOSFixedTopPX();
        }

        $(".page-main").css({
            "margin-top": mainMarginTop + "px"
        });
    }
}

function footerFixed() {
    $(".ui-footer").removeClass("ui-fixed-hidden");
    $(".ui-header").removeClass("ui-fixed-hidden");

    $(".ui-footer").removeClass("slideup");
    $(".ui-header").removeClass("slidedown");

    if (!checkPopupShown()) {
        $('.ui-page-active.ui-page').css({
            'height': "100%"
        });
    }
}

function waterMark() {
    $.mobile.pageContainer.prepend('<span class="watermark"></span>');

    var IDLength = loginData["loginid"].length;
    //font-size: 2.93vw
    var stringSingleWidth = parseInt(document.documentElement.clientWidth * 2.93 / 100, 10);
    var stringHeight = parseInt(stringSingleWidth * 1.4, 10);
    var stringAllWidth = parseInt(stringSingleWidth, 10) * IDLength;
    //width = stringAllWidth * 0.6
    var width = parseInt(stringAllWidth * 0.6, 10);

    var SVG = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='" + stringHeight + "px' width='" + width + "px'>" +
        "<text x='0' y='" + stringSingleWidth + "' fill='black' font-size='" + stringSingleWidth + "'>" + loginData["loginid"] + "</text></svg>";

    $(".watermark").css('background-image', 'url("' + SVG + '")');
}

function addPlugin() {
    //window.pluginList set in plugin/config.js
    // 1.[ckeditor] need to add during "pageshow"
    // 2.other plugin add after Device Ready
    $.map(window.pluginList, function(value, key) {
        (function(pluginName, pluginIndex) {

            if (pluginName != "ckeditor") {
                $.get("plugin/" + pluginName + "/" + pluginName + ".js").done(function() {

                    var script = document.createElement("script");
                    script.type = "text/javascript";
                    script.src = "plugin/" + pluginName + "/" + pluginName + ".js";
                    document.head.appendChild(script);

                }).fail(function() {
                    console.log("----------------plugin " + pluginName + ": file does not exist");
                });
            }

            if ((pluginIndex + 1) == window.pluginList.length) {

                $(document).one("pageshow", function() {
                    $.map(window.pluginList, function(value, key) {
                        (function(pluginName) {

                            if (pluginName == "ckeditor") {
                                $.get("plugin/" + pluginName + "/" + pluginName + ".js").done(function() {

                                    var script = document.createElement("script");
                                    script.type = "text/javascript";
                                    script.src = "plugin/" + pluginName + "/" + pluginName + ".js";
                                    document.head.appendChild(script);

                                }).fail(function() {
                                    console.log("----------------plugin " + pluginName + ": file does not exist");
                                });
                            }

                        }(value));
                    });
                });

            }

        }(value, key));
    });

}

function checkiPhoneX() {
    var ratio = window.devicePixelRatio || 1;
    var screen = {
        width: window.screen.width * ratio,
        height: window.screen.height * ratio
    };

    if (screen.width === 1125 && screen.height === 2436) {
        return true; //IphoneX
    } else if (screen.width === 1242 && screen.height === 2688) {
        return true; //IphoneX MAX
    } else if (screen.width === 828 && screen.height === 1792) {
        return true; //IphoneX R
    } else {
        return false;
    }
}

function iOSFixedTopPX() {
    if (checkiPhoneX()) {
        return 30;
    } else {
        return 20;
    }
}
var appVersionRecord = {};
//checkAPPVersionRecord("initial");

//Check APP version record
function checkAPPVersionRecord(action) {
    if (action === "initial") {

        if (window.localStorage.getItem("appVersionRecord") !== null) {
            var tempData = window.localStorage.getItem("appVersionRecord");
            appVersionRecord = JSON.parse(tempData);
        }

    } else if (action === "updateFromAPI") {

        window.localStorage.setItem("appVersionRecord", JSON.stringify(appVersionRecord));

    } else if (action === "updateFromScheme") {

        var tempData = window.localStorage.getItem("appVersionRecord");
        appVersionRecord = JSON.parse(tempData);

        //For old APP Version
        if (appVersionRecord["com.qplay." + queryData["callbackApp"]] !== undefined) {
            if (queryData["versionCode"] !== undefined) {
                appVersionRecord["com.qplay." + queryData["callbackApp"]]["installed_version"] = queryData["versionCode"];
            } else {
                appVersionRecord["com.qplay." + queryData["callbackApp"]]["installed_version"] = "1";
            }
        }

        window.localStorage.setItem("appVersionRecord", JSON.stringify(appVersionRecord));

    }
}
//check app page on local
function checkAppPage(pageID, pageVisitedList, parmData) {
    //新增参数：用于不同页面间传值
    parmData = parmData || null;
    if(parmData != null && typeof parmData == 'object') {
        window.sessionStorage.setItem(pageID + "_parmData", JSON.stringify(parmData));
    }

    var pageLength = $('#' + pageID).length;
    //0表示没有该元素，直接从local添加，既第一次添加
    //1表示有该元素，直接跳转，不用添加
    if (pageLength == 0) {
        $.get('View/' + pageID + '.html', function(data) {
            //1. html
            $.mobile.pageContainer.append(data);
            $('#' + pageID).page().enhanceWithin();

            //2. language string
            setViewLanguage(pageID);

            //3. water mark
            //According to the data [waterMarkPageList] which set in index.js
            if (!(typeof waterMarkPageList === 'undefined')) {
                if (waterMarkPageList.indexOf(pageID) !== -1) {
                    $('#' + pageID).css('background-color', 'transparent');
                }
            }

            //4. js
            setTimeout(function() {
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'js/' + pageID + '.js';
                document.head.appendChild(script);

                //5. change page
                $.mobile.changePage('#' + pageID);

                if (window.ga !== undefined) {
                    window.ga.trackView(pageID);
                }

            }, 200);
            pageVisitedList.push(pageID);

        }, 'html');

    } else {

        //如果即将跳转的页面正好是当前页面（既visited最后一页），触发pageshow即可
        if (pageID == pageVisitedList[pageVisitedList.length - 1]) {
            $('#' + pageID).trigger('pageshow');

        } else {
            $.mobile.changePage('#' + pageID);
            if (window.ga !== undefined) {
                window.ga.trackView(pageID);
            }
            pageVisitedList.push(pageID);
        }

    }

}

//check app widgetPage on server
function checkWidgetPage(pageID, pageVisitedList, parmData) {
    //新增参数：用于不同页面间传值
    parmData = parmData || null;
    if(parmData != null && typeof parmData == 'object') {
        window.sessionStorage.setItem(pageID + "_parmData", JSON.stringify(parmData));
    }

    var url = serverURL + '/widget/widgetPage/' + pageID + '/' + pageID;
    var pageLength = $('#' + pageID).length;
    //0表示没有该元素，直接从local添加，既第一次添加
    //1表示有该元素，直接跳转，不用添加
    if (pageLength == 0) {

        $.get(url + '.html', function(data) {
            //1. css
            var link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = url + '.css';
            document.head.appendChild(link);

            //2. html
            $.mobile.pageContainer.append(data);
            $('#' + pageID).page().enhanceWithin();

            //3. language string
            setViewLanguage(pageID);

            //4. water mark
            //According to the data [waterMarkPageList] which set in index.js
            if (!(typeof waterMarkPageList === 'undefined')) {
                if (waterMarkPageList.indexOf(pageID) !== -1) {
                    $('#' + pageID).css('background-color', 'transparent');
                }
            }

            //5. js
            setTimeout(function() {
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = url + '.js';
                document.head.appendChild(script);

                //6. change page
                $.mobile.changePage('#' + pageID);
                if (window.ga !== undefined) {
                    window.ga.trackView(pageID);
                }

            }, 200);
            pageVisitedList.push(pageID);

        }, 'html');

    } else {

        //如果即将跳转的页面正好是当前页面（既visited最后一页），触发pageshow即可
        if (pageID == pageVisitedList[pageVisitedList.length - 1]) {
            $('#' + pageID).trigger('pageshow');

        } else {
            $.mobile.changePage('#' + pageID);
            if (window.ga !== undefined) {
                window.ga.trackView(pageID);
            }
            pageVisitedList.push(pageID);
        }

    }

}

function setViewLanguage(view) {
    $("#" + view + " .langStr").each(function(index, element) {
        var id = $(element).data("id");
        if (typeof langStr[id] !== 'undefined') {
            $(this).html(langStr[id]);
        }
    });
}

//[Android]Handle the back button
function onBackKeyDown(bForceByPassPopup) {
    // var activePageID = $.mobile.pageContainer.pagecontainer("getActivePage")[0].id;
    var activePageID = pageVisitedList[pageVisitedList.length - 1];
    var prevPageID = pageVisitedList[pageVisitedList.length - 2];
    //bForceByPassPopup = bForceByPassPopup || false;

    //param可为event对象,只有当参数为boolean类型时才赋值
    var passPopup = false;
    if(typeof bForceByPassPopup == 'boolean') {
        passPopup = bForceByPassPopup;
    }

    if (passPopup === false && checkPopupShown()) {
        var popupID = $(".ui-popup-active")[0].children[0].id;
        $('#' + popupID).popup("close");

    } else if (pageVisitedList.length == 1) {
        navigator.app.exitApp();
    } else {
        var backToPage = window.sessionStorage.getItem(activePageID + '_backTo');
        if (backToPage != null) {
            backToSpecifiedPage(backToPage, pageVisitedList);
        } else {
            pageVisitedList.pop();
            $.mobile.changePage('#' + pageVisitedList[pageVisitedList.length - 1]);
        }

    }
}

function backToHome() {

    for (; pageVisitedList.length !== 1;) {
        pageVisitedList.pop();
    }

    if (pageVisitedList.length == 1) {
        $.mobile.changePage('#' + pageVisitedList[0]);
    }
}

//退回到某一特定页面
function backToSpecifiedPage(pageID, pageVisitedList) {
    var index = 0;
    for (var i = pageVisitedList.length - 1; i > -1; i--) {
        if (pageVisitedList[i] == pageID) {
            index = i;
        }
    }

    var length = pageVisitedList.length - index - 2;
    for (var i = 0; i < length; i++) {
        pageVisitedList.pop();
    }

    //执行back逻辑
    onBackKeyDown(true);
}
function cleanHTML(input) {
    // 1. remove line breaks / Mso classes
    var stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
    var outputstringStripper = input.replace(stringStripper, ' ');
    // 2. strip Word generated HTML comments
    var commentSripper = new RegExp('<!--(.*?)-->', 'g');
    var output = outputstringStripper.replace(commentSripper, '');
    var tagStripper = new RegExp('<(/)*(meta|link|span|table|tbody|td|tr|body|div|strong|\\?xml:|st1:|o:)(.*?)>', 'gi');
    // 3. remove tags leave content if any
    output = output.replace(tagStripper, '');
    // 4. Remove everything in between and including tags '<style(.)style(.)>'
    var badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

    for (var i = 0; i < badTags.length; i++) {
        tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
        output = output.replace(tagStripper, '');
    }
    // 5. remove attributes ' style="..."'
    var badAttributes = ['style', 'start'];
    for (i = 0; i < badAttributes.length; i++) {
        var attributeStripper = new RegExp(' ' + badAttributes[i] + '="(.*?)"', 'gi');
        output = output.replace(attributeStripper, '');
    }
    return output;
}
var component = {

    clear: function() {

        var function_list = window.localStorage.getItem('FunctionList');
        if (function_list !== null) {
            window.localStorage.removeItem('FunctionList');
        }

    },
    refresh: function() {
        getFunctionList();
    }

}
//Custom API

function CustomAPI(requestType, asyncType, requestAction, successCallback, failCallback, queryData, queryStr) {
    //queryStr: start with [&], ex: &account=test&pwd=123

    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";

    function requestSuccess(data) {
        checkTokenValid(data['ResultCode'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['ResultCode']
        ];
        LogFile.createAndWriteFile(dataArr);
    }

    // review
    function requestError(data) {
        errorHandler(data,requestAction);
        if (failCallback) {
            failCallback();
        }
    }

    var signatureTime = getSignature("getTime");
    var signatureInBase64 = getSignature("getInBase64", signatureTime);

    $.ajax({
        type: requestType,
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'App-Key': appKey,
            'Signature-Time': signatureTime,
            'Signature': signatureInBase64,
            'token': loginData.token
        },
        url: serverURL + "/" + appApiPath + "/public/v101/custom/" + appKey + "/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr,
        dataType: "json",
        data: queryData,
        async: asyncType,
        cache: false,
        timeout: 30000,
        success: requestSuccess,
        error: requestError
    });

    if(window.ga !== undefined) {
        window.ga.trackEvent('CustomAPI', requestAction, appKey, serverURL + "/" + appApiPath + "/public/v101/custom/" + appKey + "/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr);
    }

}
//CustomExByKey API
//priority == "high" "low" "", default == "high"
//expiredTimeSeconds == integer, default == 3600

function CustomAPIByKey(requestType, asyncType, key, secret, requestAction, successCallback, failCallback, queryData, queryStr, expiredTimeSeconds, priority) {
    //queryStr: start with [&], ex: &account=test&pwd=123

    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";
    expiredTimeSeconds = expiredTimeSeconds || 60 * 60;
    priority = priority || "high";

    if (loginData["versionName"].indexOf("Staging") !== -1) {
        key += "test";
    } else if (loginData["versionName"].indexOf("Development") !== -1) {
        key += "dev";
    } else {
        key += "";
    }

    var urlStr = serverURL + "/" + appApiPath + "/public/v101/custom/" + key + "/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr;

    function requestSuccess(data) {
        var checkTokenValidResult = checkTokenValid(data['ResultCode'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['ResultCode']
        ];
        LogFile.createAndWriteFile(dataArr);

        //Cache
        if (checkTokenValidResult === true) {
            // save data into localstorage
            var contentInfo = [];
            var nowTime = new Date();
            contentInfo.push({
                'result': data,
                'time': nowTime
            });
            localStorage.setItem(key, JSON.stringify(contentInfo));
        }
        //Cache...
    }

    // review by alan
    function requestError(data) {
        if (priority != "low") {
            errorHandler(data, requestAction);
            if (failCallback != null) {
                failCallback();
            }
        }
    }

    if (localStorage.getItem(key) === null) {} else {
        var storageData = JSON.parse(localStorage.getItem(key));
        if (checkDataExpired(storageData[0].time, expiredTimeSeconds, 'ss')) {
            localStorage.removeItem(key);
        }
    }

    if (localStorage.getItem(key) === null) {

        var signatureTime = getSignatureByKey("getTime");
        var signatureInBase64 = getSignatureByKey("getInBase64", signatureTime, secret);

        $.ajax({
            type: requestType,
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
                'App-Key': key,
                'Signature-Time': signatureTime,
                'Signature': signatureInBase64,
                'token': loginData.token
            },
            url: urlStr,
            dataType: "json",
            data: queryData,
            async: asyncType,
            cache: false,
            timeout: 30000,
            success: requestSuccess,
            error: requestError
        });

        if (window.ga !== undefined) {
            window.ga.trackEvent('CustomAPI', requestAction, appKey, urlStr);
        }
    } else {
        var storageData = JSON.parse(localStorage.getItem(key));
        successCallback(storageData[0].result);
    }

}
//CustomEx API
//priority == "high" "low" "", default == "high"
//expiredTimeSeconds == integer, default == 3600

function CustomAPIEx(requestType, asyncType, requestAction, successCallback, failCallback, queryData, queryStr, expiredTimeSeconds, priority) {
    //queryStr: start with [&], ex: &account=test&pwd=123

    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";
    expiredTimeSeconds = expiredTimeSeconds || 60 * 60;
    priority = priority || "high";

    var urlStr = serverURL + "/" + appApiPath + "/public/v101/custom/" + appKey + "/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr;
    var keyItem = urlStr + queryData;

    function requestSuccess(data) {
        var checkTokenValidResult = checkTokenValid(data['ResultCode'], data['token_valid'], successCallback, data);

        //LOG
        var dataArr = [
            "Call API",
            requestAction,
            data['ResultCode']
        ];
        LogFile.createAndWriteFile(dataArr);
        //LOG...

        //Cache
        if (checkTokenValidResult === true) {
            // save data into localstorage
            var contentInfo = [];
            var nowTime = new Date();
            contentInfo.push({ 'result': data, 'time': nowTime });
            localStorage.setItem(keyItem, JSON.stringify(contentInfo));
        }
        //Cache...
    }

    // review by alan
    function requestError(data) {
        if (priority != "low") {
            errorHandler(data, requestAction);
            if (failCallback != null) {
                failCallback();
            }
        }
    }

    if (localStorage.getItem(keyItem) === null) {
    } else {
        var storageData = JSON.parse(localStorage.getItem(keyItem));
        if (checkDataExpired(storageData[0].time, expiredTimeSeconds, 'ss')) {
            localStorage.removeItem(keyItem);
        }
    }
    if (localStorage.getItem(keyItem) === null) {

        var signatureTime = getSignature("getTime");
        var signatureInBase64 = getSignature("getInBase64", signatureTime);

        $.ajax({
            type: requestType,
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
                'App-Key': appKey,
                'Signature-Time': signatureTime,
                'Signature': signatureInBase64,
                'token': loginData.token
            },
            url: urlStr,
            dataType: "json",
            data: queryData,
            async: asyncType,
            cache: false,
            timeout: 30000,
            success: requestSuccess,
            error: requestError
        });

        if (window.ga !== undefined) {
            window.ga.trackEvent('CustomAPI', requestAction, appKey, urlStr);
        }
    } else {
        var storageData = JSON.parse(localStorage.getItem(keyItem));
        successCallback(storageData[0].result);
    }

    return keyItem;
}
/*******************************************************************************************/
/********************************** Date Ttme function *************************************/
/*******************************************************************************************/

//covert date or time format
Date.prototype.addDays = function(days) {
    this.setDate(this.getDate() + parseInt(days));
    return this;
};

Date.prototype.yyyymmdd = function(symbol) {
    var yyyy = this.getFullYear().toString();
    var mm = (this.getMonth() + 1).toString();
    var dd = this.getDate().toString();
    return yyyy + symbol + (mm[1] ? mm : '0' + mm[0]) + symbol + (dd[1] ? dd : '0' + dd[0]);
};

Date.prototype.yyyymm = function(symbol) {
    var yyyy = this.getFullYear().toString();
    var mm = (this.getMonth() + 1).toString();
    return yyyy + symbol + (mm[1] ? mm : '0' + mm[0]);
};

Date.prototype.mmdd = function(symbol) {
    var mm = (this.getMonth() + 1).toString();
    var dd = this.getDate().toString();
    return (mm[1] ? mm : '0' + mm[0]) + symbol + (dd[1] ? dd : '0' + dd[0]);
};

Date.prototype.hhmm = function() {
    var hh = this.getHours().toString();
    var mm = this.getMinutes().toString();
    return (hh[1] ? hh : '0' + hh[0]) + ':' + (mm[1] ? mm : '0' + mm[0]);
};

Date.prototype.TimeZoneConvert = function() {
    //[this & return] format=> "2017-01-20 09:23:28"
    var timeZoneOffset = new Date().getTimezoneOffset();
    var timeZoneFixHour = timeZoneOffset / -60;
    var timeZoneFixSecond = timeZoneFixHour * 60 * 60;

    var dateStrTimestamp = this / 1000;
    var fixedDateStrTimestamp = dateStrTimestamp + timeZoneFixSecond;
    var fixedDateStr = new Date(fixedDateStrTimestamp * 1000);

    return fixedDateStr.getFullYear() + "-" + padLeft(parseInt(fixedDateStr.getMonth() + 1, 10), 2) + "-" + padLeft(fixedDateStr.getUTCDate(), 2) + " " +
        padLeft(fixedDateStr.getHours(), 2) + ":" + padLeft(fixedDateStr.getMinutes(), 2) + ":" + padLeft(fixedDateStr.getSeconds(), 2);
};

Date.prototype.TimeStamp = function() {
    return parseInt(this / 1000, 10);
};

function addThirtyMins(time) {
    var timeStr = new Date(new Date().toDateString() + ' ' + time)
    timeStr.setMinutes(timeStr.getMinutes() + 30);
    var result = timeStr.hhmm();
    return result;
}

function checkDataExpired(time, num, pram) {
    //num can't use string, use int
    var today = new Date();
    var lastTime = new Date(time);
    switch (pram) {
        case 'dd':
            lastTime.setDate(lastTime.getDate() + num);
            break;
        case 'hh':
            lastTime.setHours(lastTime.getHours() + num);
            break;
        case 'mm':
            lastTime.setMinutes(lastTime.getMinutes() + num);
            break;
        case 'ss':
            lastTime.setSeconds(lastTime.getSeconds() + num);
            break;
        case 'MM':
            lastTime.setMonth(lastTime.getMonth() + num);
            break;
        case 'yy':
            lastTime.setYear(lastTime.getYear() + num);
            break;
        default:
            break;
    }

    if (today > lastTime) {
        return true; //Expired
    } else {
        return false;
    }
}

function dateFormatYMD(date) {
    //"2017-01-20 09:23:28" is Invalid Date Format in iOS,
    //need to change into "2017/01/20 09:23:28"
    return date.replace(/-/g, '/');
}

//CallAPI get applist
function getAppList() {
    var self = this;

    this.successCallback = function (data) {

        //console.log(data);

        if (data['result_code'] == '1') {

            window.localStorage.removeItem('QueryAppListData');
            var jsonData = {};
            jsonData = {
                lastUpdateTime: new Date(),
                content: data['content']
            };
            window.localStorage.setItem('QueryAppListData', JSON.stringify(jsonData));

            //review br alan
            //for OO
            //var responsecontent = data['content'];
            //appGroupByDownload(responsecontent);
        }

    };

    this.failCallback = function (data) { };

    var __construct = function () {

        var limitSeconds = 1 * 60 * 60 * 24;
        var QueryAppListData = JSON.parse(window.localStorage.getItem('QueryAppListData'));

        if (loginData["versionName"].indexOf("Staging") !== -1) {
            limitSeconds = 1;
        } else if (loginData["versionName"].indexOf("Development") !== -1) {
            limitSeconds = 1;
        }

        if (QueryAppListData === null || checkDataExpired(QueryAppListData['lastUpdateTime'], limitSeconds, 'ss')) {
            QPlayAPI("GET", "getAppList", self.successCallback, self.failCallback);
        } else {
            //review by alan
            //for OO
            //var responsecontent = JSON.parse(window.localStorage.getItem('QueryAppListData'))['content'];
            //appGroupByDownload(responsecontent);
        }
    }();
}

//重新获取FunctionList
function refreshFunctionList() {
    //Call getFunctionList API again
    getFunctionList();
}

//清空FunctionList
function clearFunctionList() {
    var function_list = window.localStorage.getItem('FunctionList');

    if (function_list !== null) {
        window.localStorage.removeItem('FunctionList');
    }
}

//获取Function使用权限列表
function getFunctionList() {
    var self = this;
    var queryStr = "&device_type=" + device.platform;

    this.successCallback = function(data) {

        if (data['result_code'] == "1") {
            var jsonData = {};
            jsonData = {
                lastUpdateTime: new Date(),
                content: data['content']
            };
            window.localStorage.setItem('FunctionList', JSON.stringify(jsonData));

            //FunctionList分组
            var widgetArr = [];
            var functionArr = [];
            var appArr = [];
            var resultArr = data['content']['function_list'];
            for (var i = 0; i < resultArr.length; i++) {
                if (resultArr[i].function_variable.indexOf('widget_') != -1) {
                    widgetArr.push(resultArr[i]);
                } else {
                    if (resultArr[i].function_content.type == 'FUN') {
                        functionArr.push(resultArr[i]);
                    } else if (resultArr[i].function_content.type == 'APP') {
                        appArr.push(resultArr[i]);
                    }
                }
            }
            var functionObj = {};
            functionObj['widget_list'] = widgetArr;
            functionObj['function_list'] = functionArr;
            functionObj['app_list'] = appArr;
            window.localStorage.setItem('FunctionData', JSON.stringify(functionObj));

        }
    };

    this.failCallback = function(data) {};

    var __construct = function() {
        var functionData = JSON.parse(window.localStorage.getItem('FunctionList'));

        if (functionData === null || checkDataExpired(functionData['lastUpdateTime'], 1, 'hh')) {
            QPlayAPIEx("GET", "getFunctionList", self.successCallback, self.failCallback, null, queryStr, "low", 30000, true);
        }

    }();
}

//数组合并并排序
function formatReserveList(arr) {
    //1. 先按照日期合併同一天預約
    var tempArr = {};
    $.each(arr, function (index, item) {
        var key = item.ReserveDate;
        if (typeof tempArr[key] == "undefined") {
            tempArr[key] = [];
            tempArr[key].push(item);

        } else {
            tempArr[key].push(item);
        }
    });

    //2. 再按照時間將同一天內的預約進行排序
    for (var i in tempArr) {
        tempArr[i].sort(sortByBeginTime("ReserveBeginTime", "ReserveEndTime"));
    }

    return tempArr;
}

function formatReserveDate(str) {
    return str.substr(0, 4) + "-" + str.substr(4, 2) + "-" + str.substr(6, 2);
}

//获取所有预约
function getMyReserve(key, secret) {
    var self = this;
    var year = new Date().getFullYear().toString();
    var month = new Date().getMonth() + 1 < 10 ? '0' + (new Date().getMonth() + 1).toString() : (new Date().getMonth() + 1).toString();
    var firstDay = year + month + '01'; //每月第一天
    var queryData = '<LayoutHeader><ReserveUser>' + loginData['emp_no'] + '</ReserveUser><NowDate>' + firstDay + '</NowDate></LayoutHeader>';
    var rrsStr = langStr["str_063"], //预约
        relieveStr = langStr["str_064"], //物理治疗
        parkingStr = langStr["str_065"], //车位预约
        massageStr = langStr["str_066"]; //按摩预约

    var versionKey = "";
    if (loginData["versionName"].indexOf("Staging") !== -1) {
        versionKey = key + "test";
    } else if (loginData["versionName"].indexOf("Development") !== -1) {
        versionKey = key + "dev";
    } else {
        versionKey = key + "";
    }

    this.successCallback = function (data) {

        if (data['ResultCode'] === "1") {
            var resultArr = data['Content'];

            if (key == "apprrs") {

                var reserveLocal = JSON.parse(localStorage.getItem(versionKey));
                if (reserveLocal == null) {
                    for (var i in resultArr) {
                        resultArr[i].type = key;
                        resultArr[i].item = rrsStr + resultArr[i].MeetingRoomName;
                        resultArr[i].ReserveDate = formatReserveDate(resultArr[i].ReserveDate);
                    }

                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(resultArr));
                } else {
                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(reserveLocal[0].result.Content));
                }

            } else if (key == "apprelieve") {

                var reserveLocal = JSON.parse(localStorage.getItem(versionKey));
                if (reserveLocal == null) {
                    for (var i in resultArr) {
                        resultArr[i].type = key;
                        resultArr[i].item = relieveStr;
                        resultArr[i].ReserveBeginTime = new Date(resultArr[i].ReserveBeginTime).hhmm();
                        resultArr[i].ReserveEndTime = new Date(resultArr[i].ReserveEndTime).hhmm();
                        resultArr[i].ReserveDate = formatReserveDate(resultArr[i].ReserveDate);
                    }

                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(resultArr));
                } else {
                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(reserveLocal[0].result.Content));
                }

            } else if (key == "appparking") {

                var reserveLocal = JSON.parse(localStorage.getItem(versionKey));
                if (reserveLocal == null) {
                    for (var i in resultArr) {
                        resultArr[i].type = key;
                        resultArr[i].item = parkingStr;
                        resultArr[i].ReserveDate = formatReserveDate(resultArr[i].ReserveDate);
                    }

                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(resultArr));
                } else {
                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(reserveLocal[0].result.Content));
                }

            } else if (key == "appmassage") {

                var reserveLocal = JSON.parse(localStorage.getItem(versionKey));
                if (reserveLocal == null) {
                    for (var i in resultArr) {
                        resultArr[i].type = key;
                        resultArr[i].item = massageStr;
                        resultArr[i].ReserveBeginTime = new Date(resultArr[i].ReserveBeginTime).hhmm();
                        resultArr[i].ReserveEndTime = new Date(resultArr[i].ReserveEndTime).hhmm();
                        resultArr[i].ReserveDate = formatReserveDate(resultArr[i].ReserveDate);
                    }

                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(resultArr));
                } else {
                    window.sessionStorage.setItem(key + 'Reserve', JSON.stringify(reserveLocal[0].result.Content));
                }

            }

        } else {
            //如果没数据，当前key存local空数组
            window.sessionStorage.setItem(key + 'Reserve', JSON.stringify([]));

        }

        var rrsReserve = JSON.parse(sessionStorage.getItem('apprrsReserve'));
        var relieveReserve = JSON.parse(sessionStorage.getItem('apprelieveReserve'));
        var parkingReserve = JSON.parse(sessionStorage.getItem('appparkingReserve'));
        var massageReserve = JSON.parse(sessionStorage.getItem('appmassageReserve'));

        if (rrsReserve !== null && relieveReserve !== null && parkingReserve !== null && massageReserve !== null) {
            //合并
            var arr = mergeAllReserve(rrsReserve, relieveReserve, parkingReserve, massageReserve);
            //排序
            var list = formatReserveList(arr);

            window.sessionStorage.setItem('reserveList', JSON.stringify(list));
            window.sessionStorage.setItem('changeReserveListDirty', 'Y');
        }

        function mergeAllReserve(arr1, arr2, arr3, arr4) {
            arr1.push.apply(arr1, arr2);
            arr1.push.apply(arr1, arr3);
            arr1.push.apply(arr1, arr4);
            return arr1;
        }
    };

    var __construct = function () {
        CustomAPIByKey("POST", true, key, secret, "QueryMyReserve", self.successCallback, self.failCallback, queryData, "", 60 * 60, "low");
    }();
}
/************************************************************************************************/
/***************************************** Log File  ********************************************/
/************************************************************************************************/

var LogFile = {
    onErrorLoadFile: function(error) {
        //console.log("file system load error！");
    },
    onErrorCreateFile: function(error) {
        //console.log("file create error！");
    },
    onErrorReadFile: function(error) {
        //console.log("file load error!");;
    },
    onErrorRemoveFile: function(error) {
        //console.log("file remove error!");;
    },
    checkOldFile: function() {
        //check if The month before last was exist or not,
        //if exist, delete it.
        //ex: now is 2017/03, if 2017/01 exist, delete it, only remian 2017/03, 2017/02
        var nowDate = new Date();
        //var old = nowDate.setMonth(nowDate.getMonth() - 2);
        var old = nowDate.setMonth(nowDate.getMonth());
        var oldDate = new Date(old);
        var oldFile = oldDate.yyyymm("");

        this.removeFile(oldFile);
    },
    createAndWriteFile: function(dataArr) {
        //dataArr
        //[0]: Action
        //[1]: API
        //[2]: Log

        //persistent data stored
        /*
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (file) {

            //console.log('open file: ' + file.name);
            file.root.getFile(logFileName + ".json", { create: true, exclusive: false }, function (fileEntry) {

                //console.log("is file？" + fileEntry.isFile.toString());
                // fileEntry.name == 'hangge.txt'
                // fileEntry.fullPath == '/hangge.txt'

                LogFile.readFile(fileEntry, dataArr, true);

            }, LogFile.onErrorCreateFile);

        }, LogFile.onErrorLoadFile);
        */
    },
    writeFile: function(fileEntry, dataObj, isAppend) {
        fileEntry.createWriter(function(fileWriter) {
            //write success
            fileWriter.onwriteend = function() {
                //console.log("Successful file read...");
            };

            //write fail
            fileWriter.onerror = function(e) {
                //console.log("Failed file read: " + e.toString());
            };

            // If we are appending data to file, go to the end of the file.
            /*
            if (isAppend) {
                try {
                    fileWriter.seek(fileWriter.length);
                }
                catch (e) {
                    console.log("file doesn't exist!");
                }
            }
            */
            fileWriter.write(dataObj);
        });
    },
    readFile: function(fileEntry, dataArr, isAppend) {

        fileEntry.file(function(file) {
            var reader = new FileReader();

            reader.onloadend = function() {
                //console.log("Successful file read: ");
                //console.log(this.result);
                //console.log(fileEntry.fullPath);

                //new data content
                var nowDate = new Date();
                var nowTimestamp = nowDate.getTime().toString();

                if (this.result.length === 0) {
                    //data is empty
                    var logObj = {};

                    logObj[nowTimestamp] = {
                        "Action": dataArr[0],
                        "API": dataArr[1],
                        "Log": dataArr[2]
                    }
                } else {
                    //data is not empty
                    var resultData = LogFile.logDataFormat(this.result);
                    var logObj = JSON.parse(resultData);

                    logObj[nowTimestamp] = {
                        "Action": dataArr[0].toString(),
                        "API": dataArr[1].toString(),
                        "Log": dataArr[2].toString()
                    }
                }
                //console.log(logObj);
                var logJSON = JSON.stringify(logObj);
                //console.log(logJSON);

                //new log content
                var dataObj = new Blob([logJSON], { type: 'text/plain' });

                //write into file
                LogFile.writeFile(fileEntry, dataObj, true);
            };

            reader.readAsText(file);

        }, LogFile.onErrorReadFile);
    },
    removeFile: function(fileName) {
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(file) {
            file.root.getFile(fileName + "json", { create: false }, function(fileEntry) {
                fileEntry.remove(function(file) {
                    console.log("File removed!");
                }, function() {
                    console.log("error of deleting the file: " + error.code);
                }, function() {
                    console.log("file does not exist");
                });
            }, LogFile.onErrorRemoveFile);
        }, LogFile.onErrorLoadFile);
    },
    logDataFormat: function(dataStr) {
        //return dataStr + "\n";
        var tempDataTrim = dataStr.trim();
        var tempDataLastChar = tempDataTrim.substring(parseInt(tempDataTrim.length - 1, 10));
        var jsonData = dataStr;

        if (tempDataLastChar === ",") {
            var tempData = tempDataTrim.substring(0, parseInt(tempDataTrim.length - 1, 10));
            jsonData = tempData + "}";
        }

        return jsonData;
    }
};
//QPlayAPI

function QPlayAPI(requestType, requestAction, successCallback, failCallback, queryData, queryStr) {
    //API [checkAppVersion] [getSecurityList]
    //even though these 2 API were from QPlay, the API path is [/public/v101/qplay/],
    //but, when other APP call these 2 API,
    //need to set the specific [App-Key] and [appSecretKey] by the APP, not by QPlay.

    //queryStr: start with [&], ex: &account=test&pwd=123

    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";

    function requestSuccess(data) {
        checkTokenValid(data['result_code'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['result_code']
        ];
        LogFile.createAndWriteFile(dataArr);
    }

    // review
    function requestError(data) {
        errorHandler(data, requestAction);
        if (failCallback) {
            failCallback();
        }
    }

    var signatureTime = getSignature("getTime");
    var signatureInBase64 = getSignature("getInBase64", signatureTime);

    $.ajax({
        type: requestType,
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'App-Key': appKey,
            'Signature-Time': signatureTime,
            'Signature': signatureInBase64,
            'token': loginData.token,
            'push-token': loginData.pushToken
        },
        url: serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr,
        dataType: "json",
        data: queryData,
        cache: false,
        timeout: 30000,
        success: requestSuccess,
        error: requestError
    });

    if (window.ga !== undefined) {
        window.ga.trackEvent('QPlayAPI', requestAction, appKey, serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr);
    }
}
//QPlayAPIEx
//priority == "high" "low" "", default == "high"
//timer == integer, default ==
//asyncType == boolean, default == true

function QPlayAPIEx(requestType, requestAction, successCallback, failCallback, queryData, queryStr, priority, timer, asyncType) {
    //API [checkAppVersion] [getSecurityList]
    //even though these 2 API were from QPlay, the API path is [/public/v101/qplay/],
    //but, when other APP call these 2 API,
    //need to set the specific [App-Key] and [appSecretKey] by the APP, not by QPlay.

    //queryStr: start with [&], ex: &account=test&pwd=123

    priority = priority || "high";
    timer = timer || 30000;
    asyncType = asyncType || true;
    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";

    function requestSuccess(data) {
        checkTokenValid(data['result_code'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['result_code']
        ];
        LogFile.createAndWriteFile(dataArr);
    }

    // review by alan
    function requestError(data) {
        if (priority != "low") {
            errorHandler(data, requestAction);
            if (failCallback != null) {
                failCallback();
            }
        }
    }

    var signatureTime = getSignature("getTime");
    var signatureInBase64 = getSignature("getInBase64", signatureTime);

    $.ajax({
        type: requestType,
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'App-Key': appKey,
            'Signature-Time': signatureTime,
            'Signature': signatureInBase64,
            'token': loginData.token,
            'push-token': loginData.pushToken
        },
        url: serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr,
        dataType: "json",
        data: queryData,
        cache: false,
        async: asyncType,
        timeout: timer,
        success: requestSuccess,
        error: requestError
    });

    if (window.ga !== undefined) {
        window.ga.trackEvent('QPlayAPI', requestAction, appKey, serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr);
    }
}
//QPlayAPINewHeader
//priority == "high" "low" "", default == "high"
//timer == integer, default ==
//asyncType == boolean, default == true

function QPlayAPINewHeader(requestType, requestAction, headerKey1, headerKey2, headerValue1, headerValue2, successCallback, failCallback, queryData, queryStr, priority, timer, asyncType) {
    //API [checkAppVersion] [getSecurityList]
    //even though these 2 API were from QPlay, the API path is [/public/v101/qplay/],
    //but, when other APP call these 2 API,
    //need to set the specific [App-Key] and [appSecretKey] by the APP, not by QPlay.

    //queryStr: start with [&], ex: &account=test&pwd=123

    priority = priority || "high";
    timer = timer || 30000;
    asyncType = asyncType || true;
    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";
    headerKey1 = headerKey1 || null;
    headerKey2 = headerKey2 || null;

    function requestSuccess(data) {
        checkTokenValid(data['result_code'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['result_code']
        ];
        LogFile.createAndWriteFile(dataArr);
    }

    // review by alan
    function requestError(data) {
        if (priority != "low") {
            errorHandler(data, requestAction);
            if (failCallback != null) {
                failCallback();
            }
        }
    }

    var signatureTime = getSignature("getTime");
    var signatureInBase64 = getSignature("getInBase64", signatureTime);

    var headerData = {
        'Content-Type': 'application/json; charset=utf-8',
        'App-Key': appKey,
        'Signature-Time': signatureTime,
        'Signature': signatureInBase64,
        'token': loginData.token,
        'push-token': loginData.pushToken
    }
    if(headerKey1 !== null) {
        headerData[headerKey1] = headerValue1;
    }
    if(headerKey2 !== null) {
        headerData[headerKey2] = headerValue2;
    }

    $.ajax({
        type: requestType,
        headers: headerData,
        url: serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr,
        dataType: "json",
        data: queryData,
        cache: false,
        async: asyncType,
        timeout: timer,
        success: requestSuccess,
        error: requestError
    });

    if (window.ga !== undefined) {
        window.ga.trackEvent('QPlayAPI', requestAction, appKey, serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr);
    }

}
//图片上传
function QStorageAPI(requestType, asyncType, requestAction, successCallback, failCallback, queryData, queryStr) {
    //API [checkAppVersion] [getSecurityList]
    //even though these 2 API were from QPlay, the API path is [/public/v101/qplay/],
    //but, when other APP call these 2 API,
    //need to set the specific [App-Key] and [appSecretKey] by the APP, not by QPlay.

    //requestAction = 'picture' || 'portrait'
    //queryData = new FormData()
    //queryStr: start with [&], ex: &account=test&pwd=123

    failCallback = failCallback || null;
    queryData = queryData || null;
    queryStr = queryStr || "";

    function requestSuccess(data) {
        checkTokenValid(data['ResultCode'], data['token_valid'], successCallback, data);

        var dataArr = [
            "Call API",
            requestAction,
            data['ResultCode']
        ];
        LogFile.createAndWriteFile(dataArr);
    }

    // review
    function requestError(data) {
        errorHandler(data, requestAction);
        if (failCallback) {
            failCallback();
        }
    }

    var signatureTime = getSignature("getTime");
    var signatureInBase64 = getSignature("getInBase64", signatureTime);

    $.ajax({
        type: requestType,
        headers: {
            'App-Key': appKey,
            'Signature-Time': signatureTime,
            'Signature': signatureInBase64,
            'account': loginData.emp_no
        },
        url: serverURL + "/qstorage/public/v101/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr,
        data: queryData,
        async: asyncType,
        processData: false,
        contentType: false,
        success: requestSuccess,
        error: requestError
    });

    if (window.ga !== undefined) {
        window.ga.trackEvent('QStorageAPI', requestAction, appKey, serverURL + "/" + appApiPath + "/public/v101/qplay/" + requestAction + "?lang=" + browserLanguage + "&uuid=" + loginData.uuid + queryStr);
    }
}
function UpdateMessageListContent(messagecontent__, fromAPI) {

    //0. check orginal
    var orginalContent = JSON.parse(window.localStorage.getItem('messagecontentEx'));
    if (orginalContent !== null && orginalContent.content !== null) {
        if (fromAPI) {
            for (var messageindex = 0; messageindex < orginalContent.content.message_count; messageindex++) {
                var oldmessage = orginalContent.content.message_list[messageindex];
                if (oldmessage.message_type == "news") {
                    //find it in new content
                    for (var newmessageindex = 0; newmessageindex < messagecontent__.message_count; newmessageindex++) {
                        var newmessage = messagecontent__.message_list[newmessageindex];
                        if (newmessage.message_send_row_id == oldmessage.message_send_row_id) {
                            messagecontent__.message_list[newmessageindex] = oldmessage;
                            break;
                        }
                    }
                }
            }
        }
    }

    //1. keep to localStorage
    var jsonData = {};
    jsonData = {
        lastUpdateTime: new Date(),
        content: messagecontent__
    };
    window.localStorage.setItem('messagecontentEx', JSON.stringify(jsonData));
    sessionStorage.setItem('changeMessageContentDirty', 'Y');

    //2. for badge
    var countNews = 0;
    var countEvents = 0;
    var countNewsUnread = 0;
    var countEventUnread = 0;
    var countNewsDeleted = 0;
    var countEventDeleted = 0;
    var badgeCount = 0;

    for (var messageindex = 0; messageindex < messagecontent__.message_count; messageindex++) {

        var message = messagecontent__.message_list[messageindex];

        if (message.message_type == "news") {
            countNews++;
            if (message.read === "N") {
                countNewsUnread++;
                badgeCount++;
            } else if (message.read === "D") {
                countNewsDeleted++;
            }
        } else if (message.message_type == "event") {
            countEvents++;
            if (message.read === "N") {
                countEventUnread++;
                badgeCount++;
            } else if (message.read === "D") {
                countEventDeleted++;
            }
        }
    }

    if (device.platform === "iOS") {
        window.plugins.jPushPlugin.setBadge(Math.max(0, badgeCount));
        window.plugins.jPushPlugin.setApplicationIconBadgeNumber(Math.max(0, badgeCount));
        window.cordova.plugins.notification.badge.set(Math.max(0, badgeCount));
    } else {
        window.plugins.QPushPlugin.setApplicationIconBadgeNumber(Math.max(0, badgeCount));
        window.cordova.plugins.notification.badge.set(Math.max(0, badgeCount));
    }
}

function QueryMessageListEx(bForce) {

    var self = this;
    bForce = bForce || false;
    var queryStr = "";
    var msgDateTo = getTimestamp();
    var msgDateFrom = parseInt(msgDateTo - 60 * 60 * 24 * 30, 10);
    var messagecontent_ = null;

    queryStr = "&date_from=" + msgDateFrom + "&date_to=" + msgDateTo + "&overwrite_timestamp=1";

    this.successCallback = function(data) {
        var resultcode = data['result_code'];

        if (resultcode === 1) {

            var messageCount = data['content']['message_count'];
            var messagecontent = data['content'];

            //Update datetime according to local timezone
            var messageindexLength = parseInt(messagecontent.message_count - 1, 10);

            for (var messageindex = 0; messageindex < messageindexLength; messageindex++) {
                var message = messagecontent.message_list[messageindex];
                var tempDate = dateFormatYMD(message.create_time);
                var createTime = new Date(tempDate);
                var createTimeConvert = createTime.TimeZoneConvert();
                message.create_time = createTimeConvert;
            }

            UpdateMessageListContent(messagecontent, true);
        }

    };

    this.failCallback = function(data) {};

    var __construct = function() {

        messagecontent_ = JSON.parse(window.localStorage.getItem('messagecontent'));
        if (messagecontent_ !== null && messagecontent_.lastUpdateTime === undefined) {
            //it's old data from QPlay2.0
            //convert to new format
            var jsonData = {};
            var date = new Date();
            jsonData = {
                lastUpdateTime: date.setDate(date.getDate() - 1),
                content: messagecontent_
            };
            window.localStorage.setItem('messagecontentEx', JSON.stringify(jsonData));
            window.localStorage.removeItem('messagecontent');
        } else if (messagecontent_ !== null && messagecontent_.lastUpdateTime !== undefined) {
            window.localStorage.setItem('messagecontentEx', JSON.stringify(messagecontent_));
            window.localStorage.removeItem('messagecontent');
        }
        messagecontent_ = JSON.parse(window.localStorage.getItem('messagecontentEx'));

        if (bForce === true || messagecontent_ === null || checkDataExpired(messagecontent_['lastUpdateTime'], 1, 'hh')) {
            QPlayAPIEx("GET", "getMessageList", self.successCallback, self.failCallback, null, queryStr);
        }
    }();
}
/****************************************************************************************/
/********************************** String function *************************************/
/****************************************************************************************/

//string function
function replaceStr(content, originItem, replaceItem) {
    $.each(originItem, function(index, value) {
        content = content.replaceAll(value.toString(), replaceItem[index].toString())
    });
    return content;
}

String.prototype.replaceAll = function(target, replacement) {
    return this.split(target).join(replacement);
};

// convert yyyymmdd to [yyyy, mm, dd]
function cutStringToArray(string, array) {
    var strMatch = '';
    $.each(array, function(index, value) {
        strMatch += '(\\d{' + value + '})'; //like '/(\d{4})(\d{2})(\d{2})/'
    });
    var reg = new RegExp(strMatch);
    var result = string.match(reg);
    return result;
}

function padLeft(str, length) {
    str = str.toString();

    if (str.length >= length)
        return str;
    else
        return padLeft("0" + str, length);
}

//API - XML data need to do [ PHP htmlspecialchars() ]
function htmlspecialchars(text) {
    if (typeof text === "string") {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    } else {
        return text;
    }
}
/****************************************************************************************/
/********************************** Template JS *****************************************/
/****************************************************************************************/

// Override jQuery Funciton
// Every time when call jQuery (append, prepend, hmtl) funciton,
// do tplJS.setMultiLanguage()

function overridejQueryFunction() {

    function checkValToSetLang(value) {
        if (typeof value != 'undefined') {
            tplJS.setMultiLanguage(value);
        }
    };

    var originalAppend = $.fn.append;
    $.fn.append = function(value) {
        checkValToSetLang(value);
        return originalAppend.call(this, value);
    };

    var originalPrepend = $.fn.prepend;
    $.fn.prepend = function(value) {
        checkValToSetLang(value);
        return originalPrepend.call(this, value);
    };

    var originalAppenTo = $.fn.appendTo;
    $.fn.appendTo = function(value) {
        checkValToSetLang(value);
        return originalAppenTo.call(this, value);
    };

    var originalPrependTo = $.fn.prependTo;
    $.fn.prependTo = function(value) {
        checkValToSetLang(value);
        return originalPrependTo.call(this, value);
    };
    /*
    var originalHTML = $.fn.html;
    $.fn.html = function(value) {
        if (typeof value != 'undefined') {
            checkValToSetLang(value);
            return originalHTML(value);
        } else {
            return $(this)[0].innerHTML;
        }
    };
    */
}


// Render Action:
//1. append
//2. prepend
//3. html

var tplJS = {
    tplRender: function(pageID, contentID, renderAction, HTMLContent) {
        if (pageID == null) {
            if (renderAction === "append") {
                $("body").append(HTMLContent);
            } else if (renderAction === "prepend") {
                $("body").prepend(HTMLContent);
            } else if (renderAction === "html") {
                $("body").html(HTMLContent);
            }
        } else {
            if (renderAction === "append") {
                $("#" + pageID + " #" + contentID).append(HTMLContent);
            } else if (renderAction === "prepend") {
                $("#" + pageID + " #" + contentID).prepend(HTMLContent);
            } else if (renderAction === "html") {
                $("#" + pageID + " #" + contentID).html(HTMLContent);
            }
        }

        this.setMultiLanguage(HTMLContent);
    },
    setDOMAttr: function(dom, data) {
        $.each(data, function(key, value) {
            if (key === "class") {
                dom.addClass(value);
            } else {
                dom.prop(key, value);
            }
        });
    },
    setMultiLanguage: function(dom) {
        if ($(dom).find(".langStr").length > 0) {
            $(dom).find(".langStr").each(function(index, element) {
                var id = $(element).data("id");
                $(element).html(langStr[id]);
            });
        }
    },
    getRealContentHeight: function() {
        var header = $.mobile.activePage.find("div[data-role='header']:visible");
        var footer = $.mobile.activePage.find("div[data-role='footer']:visible");
        //var content = $.mobile.activePage.find("div[data-role='content']:visible:visible");
        var content = $.mobile.activePage.find("div[data-role='main']:visible:visible");
        var viewport_height = $(window).height();

        var content_height = viewport_height - header.outerHeight();

        if ((content.outerHeight() - header.outerHeight() - footer.outerHeight()) <= viewport_height) {
            //content_height -= (content.outerHeight() - content.height());
        }

        return content_height;
    },
    preventPageScroll: function() {
        //Prevent Background Page to be scroll, when Option Popup is shown,
        //Change the [height / overflow-y] of Background Page,
        //And then, when Option Popup is close, recovery the [height / overflow-y] of Background Page.
        /*
        var adjustHeight = this.getRealContentHeight();
        var adjustPaddingBottom = 0;

        if (device.platform === "iOS") {
            adjustPaddingBottom = 20;
        }

        $.mobile.activePage.outerHeight(adjustHeight);

        $.mobile.activePage.css({
            "height": adjustHeight,
            "min-height": adjustHeight,
            "padding-bottom": adjustPaddingBottom + "px",
            "overflow-y": "hidden"
        });

        if (checkPopupShown()) {
            var header = $.mobile.activePage.find("div[data-role='header']:visible");
            var popupScreenHeight = adjustHeight + header.outerHeight();

            if (device.platform === "iOS") {
                popupScreenHeight += 20;
            }

            $(".ui-popup-screen.in").height(popupScreenHeight);
        }
        */
        tplJS.originalScrollTop = $("body").scrollTop();
        tplJS.originalUIPageHeight = $(".ui-page-active.ui-page").height();
        tplJS.originalUIPageScrollHeight = $("body").prop("scrollHeight");
        tplJS.originalUIPageMinHeight = parseInt($(".ui-page-active.ui-page").css("min-height"), 10);
        tplJS.originalPageMainHeight = $(".ui-page-active .page-main").height();
        tplJS.originalUITabsHeight = $(".ui-page-active .ui-tabs").height();
        var windowHeight = $(window).height();
        var headerHeight = $(".ui-page-active .ui-header").height();
        var footerHeight = $(".ui-page-active .ui-footer").height();
        var tempHeight = windowHeight - headerHeight - footerHeight;

        if (tplJS.originalPageMainHeight < tempHeight) {
            tplJS.originalPageMainHeight = tempHeight;
        }
        if (tplJS.originalUITabsHeight < tempHeight) {
            tplJS.originalUITabsHeight = tempHeight;
        }
        tplJS.originalUIPageScrollHeight = tplJS.originalUIPageScrollHeight - headerHeight - footerHeight;

        $('.ui-page-active.ui-page, .ui-page-active .page-main, .ui-page-active .ui-tabs').css({
            'height': tempHeight,
            'overflow-y': 'hidden',
            'touch-action': 'none'
        });

        $('.ui-page-active.ui-page').css({
            'min-height': tempHeight
        });

        $('body').css('overflow', 'hidden').on('touchmove', function(e) {
            var preventScroll = true;
            var offsetParent = e.target.offsetParent;

            if ($(offsetParent).hasClass("ui-datebox-container")) {
                preventScroll = false;
            } else if ($(e.target).closest(".ui-popup").length > 0) {
                var headerLength = $(e.target).closest(".header").length;
                var footerLength = $(e.target).closest(".footer").length;
                var listview = $(offsetParent).find("ul[data-role=listview]");

                if ($(listview).prop("scrollHeight") > parseInt($(listview).height() + 6, 10)) {
                    preventScroll = false;
                }
                if (footerLength > 0) {
                    preventScroll = true;
                }
                if (headerLength > 0) {
                    preventScroll = true;
                }
            }

            //For QForum
            if ($(e.target).hasClass("QForum-Content")) {
                $(e.target).css({
                    'touch-action': 'auto'
                });

                $('html, body').animate({
                    scrollTop: 0
                }, 0);
            }

            if (preventScroll) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
    },
    recoveryPageScroll: function() {
        //Padding
        /*
        var paddingTop = parseInt($.mobile.activePage.css("padding-top"), 10);
        var paddingBottom = parseInt($.mobile.activePage.css("padding-bottom"), 10);

        var header = $.mobile.activePage.find("div[data-role='header']:visible");
        var footer = $.mobile.activePage.find("div[data-role='footer']:visible");
        var originalHeight = $.mobile.activePage.outerHeight() - paddingTop - paddingBottom + header.outerHeight() + footer.outerHeight();

        $.mobile.activePage.outerHeight($.mobile.activePage.outerHeight());

        $.mobile.activePage.css({
            "height": originalHeight,
            "padding-bottom": 0,
            "overflow-y": "auto"
        });
        */

        $('body').css('overflow', 'auto').off('touchmove');
        $('.ui-page-active.ui-page').css({
            'height': tplJS.originalUIPageScrollHeight,
            'min-height': tplJS.originalUIPageMinHeight
        });
        $('.ui-page-active .page-main').css({
            'height': tplJS.originalPageMainHeight
        });
        $('.ui-page-active .ui-tabs').css({
            'height': tplJS.originalUITabsHeight
        });
        $('.ui-page-active.ui-page, .ui-page-active .page-main, .ui-page-active .ui-tabs').css({
            'overflow-y': 'auto',
            'touch-action': 'auto'
        });
        $('html, body').animate({
            scrollTop: tplJS.originalScrollTop
        }, 0);
    },
    Tab: function(pageID, contentID, renderAction, data) {
        var tabHTML = $("template#tplTab").html();
        var tab = $(tabHTML);

        //Navbar
        this.Navbar(null, null, null, data.navbar, tab);

        //Tab Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(tab, data.attr);
        }

        //Tab content
        var tabContentHTML = tab.find("template#tplTabContent").html();

        for (var i = 0; i < data.content.length; i++) {
            var tabContent = $(tabContentHTML);
            tabContent.prop("id", data.content[i].id);

            //Set Attr
            this.setDOMAttr(tabContent, data.content[i].attr);
            tab.append(tabContent);
        }

        //Initial Tab
        tab.tabs();

        //Render Template
        this.tplRender(pageID, contentID, renderAction, tab);
    },
    Navbar: function(pageID, contentID, renderAction, data, dom) {
        //Navbar can be created:
        //1. append inside [ Tab ]
        //2. just display button group
        pageID = pageID || null;
        contentID = contentID || null;
        renderAction = renderAction || null;
        dom = dom || null;

        var navbarHTML = $("template#tplNavbar").html();
        var navbar = $(navbarHTML);

        //Navbar Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(navbar, data.attr);
        }

        //Nvrbar button
        var navbarButtonHTML = navbar.find("template#tplNavbarButton").html();
        navbar.find("ul").empty();

        for (var i = 0; i < data.button.length; i++) {
            var navbarButton = $(navbarButtonHTML);
            var className;

            if (i === 0) {
                //First Button
                className = "ui-btn-active tpl-navbar-button-left";
            } else if (i === parseInt(data.button.length - 1, 10)) {
                //Last Button
                className = "tpl-navbar-button-right";
            }

            if (data.button[i].href !== undefined && data.button[i].href.length > 0) {
                navbarButton.find("a").prop("href", "#" + data.button[i].href);
            }

            navbarButton.find("a").addClass(className);
            navbarButton.find("a").html(data.button[i].text);

            //Set Attr
            if (data.button[i].attr !== undefined) {
                this.setDOMAttr(navbarButton.find("a"), data.button[i].attr);
            }

            navbar.find("ul").append(navbarButton);
        }

        //Initial Navbar
        navbar.navbar();

        if (dom !== null) {
            //Append to DOM
            dom.append(navbar);
        } else {
            //Render Template
            this.tplRender(pageID, contentID, renderAction, navbar);
        }
    },
    DropdownList: function(pageID, contentID, renderAction, type, data) {
        var dropdownListHTML = $("template#tplDropdownList").html();
        var dropdownList = $(dropdownListHTML);

        //DropdownList ID
        dropdownList.prop("id", data.id);

        //DropdownList Default Selected Option Value
        var defaultValue = "";
        if (data.defaultValue !== undefined) {
            defaultValue = data.defaultValue;
            $("#" + data.id).data("multiVal", defaultValue);
        }

        //DropdownList AutoResize
        var autoResize = true;
        if (data.autoResize !== undefined) {
            autoResize = data.autoResize;
        }

        //DropdownList Multiple Select
        var multiSelect = false;
        if (data.multiSelect !== undefined) {
            multiSelect = data.multiSelect;
            dropdownList.data("multiple", multiSelect);
        }


        var changeDefaultText = false;
        if (data.changeDefaultText !== undefined) {
            changeDefaultText = data.changeDefaultText;
        }

        //DropdownList Background IMG
        if (type === "typeB") {
            dropdownList.addClass("tpl-dropdown-list-icon-add");
        }

        //DropdownList Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(dropdownList, data.attr);
        }

        //DropdownList Option
        var dropdownListOptionHTML = dropdownList.find("template#tplDropdownListOption").html();

        if (type === "typeA") {
            for (var i = 0; i < data.option.length; i++) {
                var dropdownListOption = $(dropdownListOptionHTML);

                dropdownListOption.prop("value", data.option[i].value);
                dropdownListOption.prop("text", data.option[i].text);

                if (defaultValue == data.option[i].value) {
                    dropdownListOption.prop("selected", "selected");
                }

                dropdownList.append(dropdownListOption);
            }
        } else if (type === "typeB") {
            var dropdownListOption = $(dropdownListOptionHTML);
            dropdownListOption.prop("text", data.defaultText);
            dropdownList.append(dropdownListOption);
        }

        //Render Template
        this.tplRender(pageID, contentID, renderAction, dropdownList);

        //Option in Popup
        var popupHTML = $("template#tplPopup").html();
        var popup = $(popupHTML);
        var popupID = data.id + "-option";
        var dropdownListUlID = data.id + "-option-list";

        popup.find("div[data-role='main']").html("");
        popup.prop("id", popupID);

        var dropdownListOptionHTML = $("template#tplPopupContentDropdownListOption").html();
        var dropdownList = $(dropdownListOptionHTML);

        //Header: typeA / typeB
        var dropdownListHeader = dropdownList.siblings(".header." + type);
        if (type === "typeB") {
            dropdownListHeader.find(".title").html(data.title);
        }

        var dropdownListUl = dropdownList.siblings(".main");

        dropdownListUl.prop("id", dropdownListUlID);

        var dropdownListLiHTML = dropdownList.find("template#tplPopupContentDropdownListLi").html();
        var dropdownListHrHTML = dropdownList.find("template#tplPopupContentDropdownListHr").html();

        for (var i = 0; i < data.option.length; i++) {
            var dropdownListLi = $(dropdownListLiHTML);
            dropdownListLi.data("value", data.option[i].value);
            dropdownListLi.html(data.option[i].text);
            dropdownListUl.append(dropdownListLi);

            if (defaultValue == data.option[i].value) {
                dropdownListLi.addClass("tpl-dropdown-list-selected");
            }

            if (i !== parseInt(data.option.length - 1, 10)) {
                var dropdownListHr = $(dropdownListHrHTML);
                dropdownListHr.addClass("ui-hr-option");
                dropdownListUl.append(dropdownListHr);
            }
        }

        popup.find("div[data-role='main']").append(dropdownListHeader);
        popup.find("div[data-role='main']").append(dropdownListUl);

        //Render Template
        this.tplRender(pageID, contentID, renderAction, popup);

        //When Popup open, Auto Resize height of Popup main,
        //and change height of page, prevent User to scroll the page behind Popup.
        $(document).one("popupafteropen", "#" + popupID, function() {
            var popup = $(this);
            var popupHeight = popup.height();
            var popupHeaderHeight = $("#" + popupID + " .header").height();
            var popupFooterHeight = popup.find("div[data-role='main'] .footer").height();

            //ui-content paddint-top/padding-bottom:3.07vw
            var uiContentPaddingHeight = parseInt(document.documentElement.clientWidth * 3.07 * 2 / 100, 10);

            //Ul margin-top:2.17vw
            var ulMarginTop = parseInt(document.documentElement.clientWidth * 2.17 / 100, 10);

            var popupMainHeight = parseInt(popupHeight - popupHeaderHeight - popupFooterHeight - uiContentPaddingHeight - ulMarginTop, 10);
            $(this).find("div[data-role='main'] .main").height(popupMainHeight);
            $(this).find("div[data-role='main'] .main ul").height(popupMainHeight);

            if (device.platform === "Android") {
                var marginTop = 0;
            } else {
                var marginTop = 20;
            }

            $('.ui-popup-screen.in').animate({
                'overflow-y': 'hidden',
                'touch-action': 'none',
                'height': $(window).height(),
                'margin-top': marginTop + 'px'
            }, 0, function() {
                var top = $(".ui-popup-screen.in").offset().top;
                if (top < 0) {
                    $('.ui-popup-screen.in').css({
                        'top': Math.abs(top) + "px"
                    });
                }
            });

            var viewHeight = $(window).height();
            var popupHeight = $(this).outerHeight();
            var top = (viewHeight - popupHeight) / 2;
            $(this).parent().css("top", top + "px");
        });

        $(document).off("popupbeforeposition", "#" + popupID);
        $(document).on("popupbeforeposition", "#" + popupID, function() {
            tplJS.preventPageScroll();

            if (device.platform === "iOS") {
                $("body").animate({
                    "scrollTop": 0
                }, 0);
            }
        });

        //For data-dismissible=true
        $(document).on("popupafterclose", "#" + popupID, function() {
            tplJS.recoveryPageScroll();
        });

        //Initialize Popup
        $('#' + popupID).popup();

        $(document).on("click", "#" + data.id, function() {
            $('#' + popupID).popup('open');
        });

        (function(dropdownListID) {
            $(document).on("click", "#" + popupID + " .close", function() {
                if (type === "typeA") {
                    if (multiSelect) {
                        $("#" + dropdownListID).trigger("change");
                    }
                }

                $('#' + popupID).popup('close');

                if (type === "typeA") {
                    if (autoResize) {
                        tplJS.reSizeDropdownList(dropdownListID, type);
                    }
                }
                tplJS.recoveryPageScroll();
            });
        }(data.id));

        //Click Li to change the value of Dropdown List
        (function(dropdownListID) {
            $(document).on("click", "#" + popupID + " ul li", function() {
                if (!multiSelect) {
                    $("#" + popupID + " ul li").removeClass("tpl-dropdown-list-selected");
                    $(this).addClass("tpl-dropdown-list-selected");
                } else {
                    $(this).toggleClass("tpl-dropdown-list-selected");
                }

                if (type === "typeA") {
                    if (!multiSelect) {
                        $("#" + dropdownListID).val($(this).data("value"));
                        if (autoResize) {
                            tplJS.reSizeDropdownList(dropdownListID, type);
                        }
                    } else {
                        //Drowdown List set Multiple Value
                        var multiVal = $("#" + dropdownListID).data("multiVal");
                        if (multiVal !== undefined && multiVal.length > 0) {
                            var dataString = "";
                            var selectAll = false;
                            var dataArray = multiVal.split("|");
                            var optionValue = $(this).data("value");
                            var index = dataArray.indexOf(optionValue);
                            var indexAll = dataArray.indexOf("all");

                            if (optionValue === "all") {
                                if (indexAll === -1) {
                                    selectAll = true;
                                } else {
                                    dataArray.splice(indexAll, 1);
                                }
                            } else {
                                if (index > -1) {
                                    dataArray.splice(index, 1);
                                } else {
                                    dataArray.push($(this).data("value"));

                                    if (indexAll > -1) {
                                        dataArray.splice(indexAll, 1);
                                    }
                                }
                            }

                            if (selectAll) {
                                $("#" + dropdownListID).data("multiVal", "all");
                                $("#" + popupID + " ul li").removeClass("tpl-dropdown-list-selected");
                                $("#" + popupID + " ul li:eq(0)").addClass("tpl-dropdown-list-selected");
                            } else {
                                $("#" + popupID + " ul li:eq(0)").removeClass("tpl-dropdown-list-selected");

                                if (dataArray.length > 0) {
                                    dataString = dataArray.join("|");
                                }
                                $("#" + dropdownListID).data("multiVal", dataString);
                            }

                        } else {
                            $("#" + dropdownListID).data("multiVal", $(this).data("value"));
                        }
                    }
                } else if (type === "typeB") {
                    //Find drowdown list, set selected option value
                    var defaultText;
                    if (!changeDefaultText) {
                        $("#" + dropdownListID + " option").each(function(index, el) {
                            if (index === 0) {
                                defaultText = $(el).text();
                            }
                        });
                    } else {
                        $("#" + dropdownListUlID + " li").each(function(index, value) {
                            if ($(value).hasClass("tpl-dropdown-list-selected")) {
                                if ($(value).find('div:nth-child(2)').text() === "") {
                                    defaultText = $(value).text();
                                } else {
                                    defaultText = $(value).find('div:nth-child(2)').text();
                                }
                            }
                        });
                    }

                    var newOption = '<option value="' + $(this).data("value") + '" hidden selected>' + defaultText + '</option>';
                    $("#" + dropdownListID).find("option").remove().end().append(newOption);
                    tplJS.reSizeDropdownList(dropdownListID, type);
                }

                if (!multiSelect) {
                    //Trigger drowdown list 'change' event
                    $("#" + dropdownListID).trigger("change");

                    //Close Popup
                    $('#' + popupID).popup('close');

                    tplJS.recoveryPageScroll();
                }
            });
        }(data.id));

        //Auto Resize DropdownList Width
        this.reSizeDropdownList = function(ID, type, setWidth) {
            type = type || null;
            var tempWidth;
            //Background Image Width
            var imgWidth;

            if (type === "typeA") {
                tempWidth = 3.54;
                imgWidth = 8;
            } else if (type === "typeB") {
                tempWidth = 4.04;
                imgWidth = 5;
            }

            if (type !== null) {
                $("span[data-id='tmp_option_width']").html($('#' + ID + ' option:selected').text());
                var pxWidth = $("span[data-id='tmp_option_width']").outerWidth();
                //px conver to vw
                var vwWidth = (100 / document.documentElement.clientWidth) * pxWidth + tempWidth + imgWidth;
                $("#" + ID).css('width', vwWidth + 'vw');
            } else {
                $("#" + ID).css('width', setWidth + 'vw');
            }
        };

        this.reSizeDropdownList(data.id, type);

    },
    Popup: function(pageID, contentID, renderAction, data) {
        var showMain = false;
        var popupHTML = $("template#tplPopup").html();
        var popup = $(popupHTML);
        var HRHTML = $("template#tplPopupContentHr").html();

        //Popup ID
        popup.prop("id", data.id);
        popup.addClass("msg");

        //Popup Content
        var contentHTML = data.content;
        var content = $(contentHTML);

        //Header
        var headerHTML = content.siblings(".header");
        if (headerHTML.length !== 0) {
            var header = headerHTML.clone();

            popup.find("div.header").append(header);
        }

        //Main
        var mainHTML = content.siblings(".main");
        if (mainHTML.length !== 0) {
            showMain = true;

            //HR Top
            var HRTop = $(HRHTML);
            HRTop.addClass("ui-hr-top");
            popup.find("div.header:first").after(HRTop);

            var main = mainHTML.clone();

            popup.find("div.main").append(main);
        }

        //HR Bottom
        var HRBottom = $(HRHTML);
        HRBottom.addClass("ui-hr-bottom");
        popup.find("div.main:first").after(HRBottom);

        //Footer
        var footerHTML = content.siblings(".footer");
        if (footerHTML.length !== 0) {
            var footer = footerHTML.clone();

            popup.find("div.footer").append(footer);
        }

        //Render Template
        this.tplRender(pageID, contentID, renderAction, popup);

        //Initialize Popup
        $('#' + data.id).popup();

        $(document).one("popupafteropen", "#" + data.id, function() {
            var popupHeight = popup.height();
            var popupHeaderHeight = popup.find("div[data-role='main'] .header").height();
            var popupFooter = popup.find("div[data-role='main'] .footer")[0];
            var popupFooterHeight = popupFooter.offsetHeight;

            //ui-content paddint-top:5.07vw
            var uiContentPaddingHeight = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Ul margin-top:5.07vw
            var ulMarginTop = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Ul margin-bottom:5.07vw
            var ulMarginBottom = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Resize Height of Main
            if (showMain) {
                var popupMainHeight = parseInt(popupHeight - popupHeaderHeight - popupFooterHeight - uiContentPaddingHeight - ulMarginTop - ulMarginBottom, 10);
                $(this).find("div[data-role='main'] .main").height(popupMainHeight);
                $(this).find("div[data-role='main'] .main ul").height(popupMainHeight);
            } else {
                $(this).find("div[data-role='main'].ui-content").css("padding-top", "0");
                $(this).find("div[data-role='main'] .main").height(0);
                var popupHeaderHeight = parseInt(popupHeight - popupFooterHeight, 10);
                $(this).find("div[data-role='main'] > .header").height(popupHeaderHeight);
                $(this).find("div[data-role='main'] .header .header").addClass("all-center");
            }
        });

        $(document).on("popupafteropen", "#" + data.id, function() {

            if (device.platform === "Android") {
                var marginTop = 0;
            } else {
                var marginTop = 20;
            }

            $('.ui-popup-screen.in').animate({
                'overflow-y': 'hidden',
                'touch-action': 'none',
                'height': $(window).height(),
                'margin-top': marginTop + 'px'
            }, 0, function() {
                var top = $(".ui-popup-screen.in").offset().top;
                if (top < 0) {
                    $('.ui-popup-screen.in').css({
                        'top': Math.abs(top) + "px"
                    });
                }
            });

            var viewHeight = $(window).height();
            var popupHeight = $(this).outerHeight();
            var top = (viewHeight - popupHeight) / 2;
            $(this).parent().css("top", top + "px");

            if (device.platform === "iOS") {
                $("body").animate({
                    "scrollTop": 0
                }, 0);
            }
        });

        $(document).off("popupbeforeposition", "#" + data.id);
        $(document).on("popupbeforeposition", "#" + data.id, function() {
            tplJS.preventPageScroll();
        });

        $(document).on("popupafterclose", "#" + data.id, function() {
            tplJS.recoveryPageScroll();
        });
    }
};


function popupMsgInit(popupClass) {
    $(popupClass).popup(); //initialize the popup
    $(popupClass).show();
    $(popupClass).popup('open');
    popupMsgCloseInit(popupClass);
}

function popupMsgCloseInit(popupClass) {
    $('body').one('click', popupClass + ' .btn-cancel', function() {
        $(popupClass).popup('close');
    });
}