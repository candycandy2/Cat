// component JS
//
// variable, function, page event for All APP
//
// appSecretKey => set in QPlayAPI.js under specific APP
//

var serverURL = "https://qplay.benq.com"; // Production API Server
var appApiPath = "qplayApi";
var qplayAppKey = "appqplay";
var download_url = "";
var QMessageKey = "1dd3ebb8bb12f1895b4a5e25";
var QMessageSecretKey = "4a9664f480e6c206469617a9";

if (window.localStorage.getItem("appKey") !== null) {
    appKey = window.localStorage.getItem("appKey");
    serverURL = window.localStorage.getItem("serverURL");
    qplayAppKey = window.localStorage.getItem("qplayAppKey");
}

var qplaySecretKey = "swexuc453refebraXecujeruBraqAc4e";
var appEnvironment = "";
var browserLanguage;
var langStr = {};
var logFileName;

var loginData = {
    company: "",
    versionName: "",
    versionCode: "",
    deviceType: "",
    pushToken: "",
    token: "",
    token_valid: "",
    uuid: "",
    checksum: "",
    domain: "",
    emp_no: "",
    loginid: "",
    messagecontent: null,
    msgDateFrom: null, //timestamp, latest time of update message from server
    doLoginDataCallBack: false,
    openMessage: false
};
var queryData = {};
var getDataFromServer = false;
var popupID;
var callHandleOpenURL = false;
var doInitialSuccess = false;
var checkTimerCount = 0;
var doHideInitialPage = false;
var initialNetworkDisconnected = false;
var showNetworkDisconnected = false;
var reStartAPP = false;
var appInitialFinish = false;
var messageRowId;
var closeInfoMsgInit = false; // let closeInfoMsg click event init once
var isOfflineEventTimeout = null;

var pageList = [];
var pageVisitedList = [];

/********************************** jQuery Mobile Event *************************************/
$(document).one("pagebeforecreate", function() {

    //For APP scrolling in [Android ver:5], set CSS
    //For font-family, set diff in iOS/Android
    $(document).on("pageshow", function() {

    });


    //Prevent JQM sometimes will auto add CSS-class [ui-fixed-hidden] in "ui-header" & "ui-footer",
    //bind event to remove this CSS-class, to ensure the position of "ui-header" & "ui-footer" were "fixed".
    $(document).on({
        popupafterclose: function() {
            footerFixed();
        },
        click: function() {
            footerFixed();
        },
        tabsactivate: function() {
            footerFixed();
        },
        touchmove: function() {
            footerFixed();
        },
        pagebeforeshow: function() {
            if (loginData.uuid.length > 0 && loginData['loginid'].length > 0) {
                var appLogData = JSON.parse(localStorage.getItem('appLogData'));
                var firstPageLoad = JSON.parse(sessionStorage.getItem('firstPageLoad'));
                if (firstPageLoad == null) {
                    sessionStorage.setItem('firstPageLoad', 'true');
                    if (appLogData != null && appLogData.log_list.length > 0) {

                    }
                }
            }
        },
        pageshow: function() {

        }
    });

    //iOS - Prevent header/footer position error
    $(document).on({
        touchstart: function(event) {
            footerFixed();
        },
        touchmove: function(event) {
            footerFixed();
        },
        touchend: function(event) {
            footerFixed();
        }
    }, "body");
});

/********************************** QPlay APP function *************************************/

//check data(token, token_value, ...) on web-storage
function checkStorageData() {

    if (window.localStorage.length === 0) {
        getDataFromServer = true;
    } else {
        //1. check loginData exist in localStorage
        var loginDataExist = processStorageData("checkLocalStorage");

        if (loginDataExist) {
            //2. if token exist, check token valid from server
            processStorageData("checkSecurityList");
        } else {
            //3. if token not exist, call QLogin / QPlay
            getDataFromServer = true;
        }
    }

    if (getDataFromServer) {
        getServerData();
    }
}

function processStorageData(action, data) {
    data = data || null;

    if (action === "checkLocalStorage") {
        var checkLoginDataExist = true;

        $.map(loginData, function(value, key) {
            if (key === "token" || key === "token_valid") {
                if (window.localStorage.getItem(key) === null) {
                    checkLoginDataExist = false;
                }
            }
        });

        return checkLoginDataExist;
    } else if (action === "checkSecurityList") {

        $.map(loginData, function(value, key) {
            if (window.localStorage.getItem(key) !== null) {
                loginData[key] = window.localStorage.getItem(key);
            }
        });

        //var FunctionList = new getFunctionList();
        //var securityList = new getSecurityList();
    } else if (action === "setLocalStorage") {
        $.map(data, function(value, key) {
            window.localStorage.setItem(key, value);
        });

        $.map(loginData, function(value, key) {
            if (window.localStorage.getItem(key) !== null) {
                loginData[key] = window.localStorage.getItem(key);
            }
        });

        if (appKey === qplayAppKey) {
            if (loginData['doLoginDataCallBack'] === true) {
                getLoginDataCallBack();
            } else {
                //var FunctionList = new getFunctionList();
                //var securityList = new getSecurityList();
            }
        }
    }

}

/************************************************************************************************/
/********************************** APP Process JS function *************************************/
/************************************************************************************************/
var closeDisconnectNetworkInit = false, // let closeDisconnectNetwork click event init once
    isDisConnect = false; // check if disconnect


//[Android]Popup > Check if popup is shown, then if User click [back] button, just hide the popup.
function checkPopupShown() {
    if ($(".ui-popup-active").length > 0) {
        popupID = $(".ui-popup-active")[0].children[0].id;
        return true;
    } else {
        popupID = "";
        return false;
    }
}

var g_loadingMask_finish = true;
var g_loadingMask_Interval = null;

//Loading Mask
function loadingMask(action, name) {

    name = name || "empty";

    if (g_loadingMask_Interval == null) {
        g_loadingMask_Interval = setInterval(function() {
            if (g_loadingMask_finish == true) {
                $(".loader").hide();
            }
        }, 500);
    }
    if (action === "show") {
        var scrollHeight = $(window).scrollTop();

        if ($(".loader").length === 0) {
            $('<div class="loader" style="top:' + scrollHeight + 'px;"><img src="img/component/ajax-loader.gif" width="80"><div style="color:#FFF;">&nbsp;</div></div>').appendTo("body");
        } else {
            $(".loader").show();
            $(".loader").css("top", scrollHeight + "px");
        }
        g_loadingMask_finish = false;
        //console.log('show by ' + name);
    } else if (action === "hide") {
        g_loadingMask_finish = true;
        //console.log('hide by ' + name);
    }
}

//When receive a Message, get message_id by different path in iOS/Android
function getMessageID(data) {
    if (device.platform === "iOS") {
        messageRowId = data.Parameter;
    } else {
        messageRowId = data.extras["Parameter"];
    }
    window.localStorage.setItem("messageRowId", messageRowId);
}

//create popup message
function popupMsg(attr, title, content, btn1, btnIsDisplay, btn2, titleImg) {
    $('#viewPopupMsg').attr('for', attr);
    $('#viewPopupMsg #titleText').text(title);
    $('#viewPopupMsg #msgContent').html(content);
    $('#viewPopupMsg #titleImg').attr('src', '');
    $('#viewPopupMsg #titleImg').addClass('hide');
    $('#viewPopupMsg #cancel').text(btn1);
    $('#viewPopupMsg #confirm').text(btn2);

    if (titleImg != '') {
        $('#viewPopupMsg #titleImg').attr('src', 'img/' + titleImg);
        $('#viewPopupMsg #titleImg').removeClass('hide');
    }

    $('#viewPopupMsg').removeClass();
    $('#viewPopupMsg button').removeClass();
    if (btnIsDisplay == true) {
        $('#viewPopupMsg #cancel').removeClass('hide');
        $('#viewPopupMsg #confirm').css('width', '50%');
        $('#viewPopupMsg #confirm').css('position', 'absolute');
    } else {
        $('#viewPopupMsg #cancel').addClass('hide');
        $('#viewPopupMsg #confirm').css('width', '100%');
        $('#viewPopupMsg #confirm').css('position', 'initial');
    }
    $('#viewPopupMsg #cancel').attr('onClick', 'popupCancelClose()');

    $('#viewPopupMsg').popup(); //initialize the popup
    $('#viewPopupMsg').show();
    $('#viewPopupMsg').popup('open');
}

function popupCancelClose() {
    $('body').on('click', '#viewPopupMsg #cancel', function() {
        $('#viewPopupMsg').popup('close');
    });
}

function footerFixed() {
    $(".ui-footer").removeClass("ui-fixed-hidden");
    $(".ui-header").removeClass("ui-fixed-hidden");

    $(".ui-footer").removeClass("slideup");
    $(".ui-header").removeClass("slidedown");

    if (!checkPopupShown()) {
        $('.ui-page-active.ui-page').css({
            'height': "100%"
        });
    }
}


var appVersionRecord = {};
//checkAPPVersionRecord("initial");

//check app page on local
function checkAppPage(pageID, pageVisitedList, parmData) {
    //新增参数：用于不同页面间传值
    parmData = parmData || null;
    if(parmData != null && typeof parmData == 'object') {
        window.sessionStorage.setItem(pageID + "_parmData", JSON.stringify(parmData));
    }

    var pageLength = $('#' + pageID).length;

    //0表示没有该元素，直接从local添加，既第一次添加
    //1表示有该元素，直接跳转，不用添加
    if (pageLength == 0) {
        $.get('View/' + pageID + '.html', function(data) {
            //1. html
            $.mobile.pageContainer.append(data);
            $('#' + pageID).page().enhanceWithin();

            //2. language string
            setViewLanguage(pageID);

            //3. water mark
            //According to the data [waterMarkPageList] which set in index.js
            if (!(typeof waterMarkPageList === 'undefined')) {
                if (waterMarkPageList.indexOf(pageID) !== -1) {
                    $('#' + pageID).css('background-color', 'transparent');
                }
            }

            //4. js
            setTimeout(function() {
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'js/' + pageID + '.js';
                document.head.appendChild(script);

                //5. change page
                $.mobile.changePage('#' + pageID);

                if (window.ga !== undefined) {
                    window.ga.trackView(pageID);
                }

            }, 200);
            pageVisitedList.push(pageID);

        }, 'html');

    } else {

        //如果即将跳转的页面正好是当前页面（既visited最后一页），触发pageshow即可
        if (pageID == pageVisitedList[pageVisitedList.length - 1]) {
            $('#' + pageID).trigger('pageshow');

        } else {
            $.mobile.changePage('#' + pageID);
            if (window.ga !== undefined) {
                window.ga.trackView(pageID);
            }
            pageVisitedList.push(pageID);
        }

    }

}

//check app widgetPage on server
function checkWidgetPage(pageID, pageVisitedList, parmData) {
    //新增参数：用于不同页面间传值
    parmData = parmData || null;
    if(parmData != null && typeof parmData == 'object') {
        window.sessionStorage.setItem(pageID + "_parmData", JSON.stringify(parmData));
    }

    var url = serverURL + '/widget/widgetPage/' + pageID + '/' + pageID;
    var pageLength = $('#' + pageID).length;

    //0表示没有该元素，直接从local添加，既第一次添加
    //1表示有该元素，直接跳转，不用添加
    if (pageLength == 0) {

        $.get(url + '.html', function(data) {
            //1. css
            var link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = url + '.css';
            document.head.appendChild(link);

            //2. html
            $.mobile.pageContainer.append(data);
            $('#' + pageID).page().enhanceWithin();

            //3. language string
            setViewLanguage(pageID);

            //4. water mark
            //According to the data [waterMarkPageList] which set in index.js
            if (!(typeof waterMarkPageList === 'undefined')) {
                if (waterMarkPageList.indexOf(pageID) !== -1) {
                    $('#' + pageID).css('background-color', 'transparent');
                }
            }

            //5. js
            setTimeout(function() {
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = url + '.js';
                document.head.appendChild(script);

                //6. change page
                $.mobile.changePage('#' + pageID);
                if (window.ga !== undefined) {
                    window.ga.trackView(pageID);
                }

            }, 200);
            pageVisitedList.push(pageID);

        }, 'html');

    } else {

        //如果即将跳转的页面正好是当前页面（既visited最后一页），触发pageshow即可
        if (pageID == pageVisitedList[pageVisitedList.length - 1]) {
            $('#' + pageID).trigger('pageshow');

        } else {
            $.mobile.changePage('#' + pageID);
            if (window.ga !== undefined) {
                window.ga.trackView(pageID);
            }
            pageVisitedList.push(pageID);
        }

    }

}

function setViewLanguage(view) {
    $("#" + view + " .langStr").each(function(index, element) {
        var id = $(element).data("id");
        if (typeof langStr[id] !== 'undefined') {
            $(this).html(langStr[id]);
        }
    });
}

//[Android]Handle the back button
function onBackKeyDown(bForceByPassPopup) {
    // var activePageID = $.mobile.pageContainer.pagecontainer("getActivePage")[0].id;
    var activePageID = pageVisitedList[pageVisitedList.length - 1];
    var prevPageID = pageVisitedList[pageVisitedList.length - 2];
    //bForceByPassPopup = bForceByPassPopup || false;

    //param可为event对象,只有当参数为boolean类型时才赋值
    var passPopup = false;
    if(typeof bForceByPassPopup == 'boolean') {
        passPopup = bForceByPassPopup;
    }

    if (passPopup === false && checkPopupShown()) {
        var popupID = $(".ui-popup-active")[0].children[0].id;
        $('#' + popupID).popup("close");

    } else if (pageVisitedList.length == 1) {
        navigator.app.exitApp();
    } else {
        var backToPage = window.sessionStorage.getItem(activePageID + '_backTo');
        if (backToPage != null) {
            backToSpecifiedPage(backToPage, pageVisitedList);
        } else {
            pageVisitedList.pop();
            $.mobile.changePage('#' + pageVisitedList[pageVisitedList.length - 1]);
        }

    }
}

function backToHome() {

    for (; pageVisitedList.length !== 1;) {
        pageVisitedList.pop();
    }

    if (pageVisitedList.length == 1) {
        $.mobile.changePage('#' + pageVisitedList[0]);
    }
}

//退回到某一特定页面
function backToSpecifiedPage(pageID, pageVisitedList) {
    var index = 0;
    for (var i = pageVisitedList.length - 1; i > -1; i--) {
        if (pageVisitedList[i] == pageID) {
            index = i;
        }
    }

    var length = pageVisitedList.length - index - 2;
    for (var i = 0; i < length; i++) {
        pageVisitedList.pop();
    }

    //执行back逻辑
    onBackKeyDown(true);
}
function cleanHTML(input) {
    // 1. remove line breaks / Mso classes
    var stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
    var outputstringStripper = input.replace(stringStripper, ' ');
    // 2. strip Word generated HTML comments
    var commentSripper = new RegExp('<!--(.*?)-->', 'g');
    var output = outputstringStripper.replace(commentSripper, '');
    var tagStripper = new RegExp('<(/)*(meta|link|span|table|tbody|td|tr|body|div|strong|\\?xml:|st1:|o:)(.*?)>', 'gi');
    // 3. remove tags leave content if any
    output = output.replace(tagStripper, '');
    // 4. Remove everything in between and including tags '<style(.)style(.)>'
    var badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

    for (var i = 0; i < badTags.length; i++) {
        tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
        output = output.replace(tagStripper, '');
    }
    // 5. remove attributes ' style="..."'
    var badAttributes = ['style', 'start'];
    for (i = 0; i < badAttributes.length; i++) {
        var attributeStripper = new RegExp(' ' + badAttributes[i] + '="(.*?)"', 'gi');
        output = output.replace(attributeStripper, '');
    }
    return output;
}
var component = {

    clear: function() {

        var function_list = window.localStorage.getItem('FunctionList');
        if (function_list !== null) {
            window.localStorage.removeItem('FunctionList');
        }

    },
    refresh: function() {
        getFunctionList();
    }

}

/*******************************************************************************************/
/********************************** Date Ttme function *************************************/
/*******************************************************************************************/

//covert date or time format
Date.prototype.addDays = function(days) {
    this.setDate(this.getDate() + parseInt(days));
    return this;
};

Date.prototype.yyyymmdd = function(symbol) {
    var yyyy = this.getFullYear().toString();
    var mm = (this.getMonth() + 1).toString();
    var dd = this.getDate().toString();
    return yyyy + symbol + (mm[1] ? mm : '0' + mm[0]) + symbol + (dd[1] ? dd : '0' + dd[0]);
};

Date.prototype.yyyymm = function(symbol) {
    var yyyy = this.getFullYear().toString();
    var mm = (this.getMonth() + 1).toString();
    return yyyy + symbol + (mm[1] ? mm : '0' + mm[0]);
};

Date.prototype.mmdd = function(symbol) {
    var mm = (this.getMonth() + 1).toString();
    var dd = this.getDate().toString();
    return (mm[1] ? mm : '0' + mm[0]) + symbol + (dd[1] ? dd : '0' + dd[0]);
};

Date.prototype.hhmm = function() {
    var hh = this.getHours().toString();
    var mm = this.getMinutes().toString();
    return (hh[1] ? hh : '0' + hh[0]) + ':' + (mm[1] ? mm : '0' + mm[0]);
};

Date.prototype.TimeZoneConvert = function() {
    //[this & return] format=> "2017-01-20 09:23:28"
    var timeZoneOffset = new Date().getTimezoneOffset();
    var timeZoneFixHour = timeZoneOffset / -60;
    var timeZoneFixSecond = timeZoneFixHour * 60 * 60;

    var dateStrTimestamp = this / 1000;
    var fixedDateStrTimestamp = dateStrTimestamp + timeZoneFixSecond;
    var fixedDateStr = new Date(fixedDateStrTimestamp * 1000);

    return fixedDateStr.getFullYear() + "-" + padLeft(parseInt(fixedDateStr.getMonth() + 1, 10), 2) + "-" + padLeft(fixedDateStr.getUTCDate(), 2) + " " +
        padLeft(fixedDateStr.getHours(), 2) + ":" + padLeft(fixedDateStr.getMinutes(), 2) + ":" + padLeft(fixedDateStr.getSeconds(), 2);
};

Date.prototype.TimeStamp = function() {
    return parseInt(this / 1000, 10);
};

function addThirtyMins(time) {
    var timeStr = new Date(new Date().toDateString() + ' ' + time)
    timeStr.setMinutes(timeStr.getMinutes() + 30);
    var result = timeStr.hhmm();
    return result;
}

function checkDataExpired(time, num, pram) {
    //num can't use string, use int
    var today = new Date();
    var lastTime = new Date(time);
    switch (pram) {
        case 'dd':
            lastTime.setDate(lastTime.getDate() + num);
            break;
        case 'hh':
            lastTime.setHours(lastTime.getHours() + num);
            break;
        case 'mm':
            lastTime.setMinutes(lastTime.getMinutes() + num);
            break;
        case 'ss':
            lastTime.setSeconds(lastTime.getSeconds() + num);
            break;
        case 'MM':
            lastTime.setMonth(lastTime.getMonth() + num);
            break;
        case 'yy':
            lastTime.setYear(lastTime.getYear() + num);
            break;
        default:
            break;
    }

    if (today > lastTime) {
        return true; //Expired
    } else {
        return false;
    }
}

function dateFormatYMD(date) {
    //"2017-01-20 09:23:28" is Invalid Date Format in iOS,
    //need to change into "2017/01/20 09:23:28"
    return date.replace(/-/g, '/');
}

function formatReserveDate(str) {
    return str.substr(0, 4) + "-" + str.substr(4, 2) + "-" + str.substr(6, 2);
}

/************************************************************************************************/
/***************************************** Log File  ********************************************/
/************************************************************************************************/

var LogFile = {
    onErrorLoadFile: function(error) {
        //console.log("file system load error！");
    },
    onErrorCreateFile: function(error) {
        //console.log("file create error！");
    },
    onErrorReadFile: function(error) {
        //console.log("file load error!");;
    },
    onErrorRemoveFile: function(error) {
        //console.log("file remove error!");;
    },
    checkOldFile: function() {
        //check if The month before last was exist or not,
        //if exist, delete it.
        //ex: now is 2017/03, if 2017/01 exist, delete it, only remian 2017/03, 2017/02
        var nowDate = new Date();
        //var old = nowDate.setMonth(nowDate.getMonth() - 2);
        var old = nowDate.setMonth(nowDate.getMonth());
        var oldDate = new Date(old);
        var oldFile = oldDate.yyyymm("");

        this.removeFile(oldFile);
    },
    createAndWriteFile: function(dataArr) {
        //dataArr
        //[0]: Action
        //[1]: API
        //[2]: Log

        //persistent data stored
        /*
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (file) {

            //console.log('open file: ' + file.name);
            file.root.getFile(logFileName + ".json", { create: true, exclusive: false }, function (fileEntry) {

                //console.log("is file？" + fileEntry.isFile.toString());
                // fileEntry.name == 'hangge.txt'
                // fileEntry.fullPath == '/hangge.txt'

                LogFile.readFile(fileEntry, dataArr, true);

            }, LogFile.onErrorCreateFile);

        }, LogFile.onErrorLoadFile);
        */
    },
    writeFile: function(fileEntry, dataObj, isAppend) {
        fileEntry.createWriter(function(fileWriter) {
            //write success
            fileWriter.onwriteend = function() {
                //console.log("Successful file read...");
            };

            //write fail
            fileWriter.onerror = function(e) {
                //console.log("Failed file read: " + e.toString());
            };

            // If we are appending data to file, go to the end of the file.
            /*
            if (isAppend) {
                try {
                    fileWriter.seek(fileWriter.length);
                }
                catch (e) {
                    console.log("file doesn't exist!");
                }
            }
            */
            fileWriter.write(dataObj);
        });
    },
    readFile: function(fileEntry, dataArr, isAppend) {

        fileEntry.file(function(file) {
            var reader = new FileReader();

            reader.onloadend = function() {
                //console.log("Successful file read: ");
                //console.log(this.result);
                //console.log(fileEntry.fullPath);

                //new data content
                var nowDate = new Date();
                var nowTimestamp = nowDate.getTime().toString();

                if (this.result.length === 0) {
                    //data is empty
                    var logObj = {};

                    logObj[nowTimestamp] = {
                        "Action": dataArr[0],
                        "API": dataArr[1],
                        "Log": dataArr[2]
                    }
                } else {
                    //data is not empty
                    var resultData = LogFile.logDataFormat(this.result);
                    var logObj = JSON.parse(resultData);

                    logObj[nowTimestamp] = {
                        "Action": dataArr[0].toString(),
                        "API": dataArr[1].toString(),
                        "Log": dataArr[2].toString()
                    }
                }
                //console.log(logObj);
                var logJSON = JSON.stringify(logObj);
                //console.log(logJSON);

                //new log content
                var dataObj = new Blob([logJSON], { type: 'text/plain' });

                //write into file
                LogFile.writeFile(fileEntry, dataObj, true);
            };

            reader.readAsText(file);

        }, LogFile.onErrorReadFile);
    },
    removeFile: function(fileName) {
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(file) {
            file.root.getFile(fileName + "json", { create: false }, function(fileEntry) {
                fileEntry.remove(function(file) {
                    console.log("File removed!");
                }, function() {
                    console.log("error of deleting the file: " + error.code);
                }, function() {
                    console.log("file does not exist");
                });
            }, LogFile.onErrorRemoveFile);
        }, LogFile.onErrorLoadFile);
    },
    logDataFormat: function(dataStr) {
        //return dataStr + "\n";
        var tempDataTrim = dataStr.trim();
        var tempDataLastChar = tempDataTrim.substring(parseInt(tempDataTrim.length - 1, 10));
        var jsonData = dataStr;

        if (tempDataLastChar === ",") {
            var tempData = tempDataTrim.substring(0, parseInt(tempDataTrim.length - 1, 10));
            jsonData = tempData + "}";
        }

        return jsonData;
    }
};


/****************************************************************************************/
/********************************** String function *************************************/
/****************************************************************************************/

//string function
function replaceStr(content, originItem, replaceItem) {
    $.each(originItem, function(index, value) {
        content = content.replaceAll(value.toString(), replaceItem[index].toString())
    });
    return content;
}

String.prototype.replaceAll = function(target, replacement) {
    return this.split(target).join(replacement);
};

// convert yyyymmdd to [yyyy, mm, dd]
function cutStringToArray(string, array) {
    var strMatch = '';
    $.each(array, function(index, value) {
        strMatch += '(\\d{' + value + '})'; //like '/(\d{4})(\d{2})(\d{2})/'
    });
    var reg = new RegExp(strMatch);
    var result = string.match(reg);
    return result;
}

function padLeft(str, length) {
    str = str.toString();

    if (str.length >= length)
        return str;
    else
        return padLeft("0" + str, length);
}

//API - XML data need to do [ PHP htmlspecialchars() ]
function htmlspecialchars(text) {
    if (typeof text === "string") {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    } else {
        return text;
    }
}
/****************************************************************************************/
/********************************** Template JS *****************************************/
/****************************************************************************************/

// Override jQuery Funciton
// Every time when call jQuery (append, prepend, hmtl) funciton,
// do tplJS.setMultiLanguage()

function overridejQueryFunction() {

    function checkValToSetLang(value) {
        if (typeof value != 'undefined') {
            tplJS.setMultiLanguage(value);
        }
    };

    var originalAppend = $.fn.append;
    $.fn.append = function(value) {
        checkValToSetLang(value);
        return originalAppend.call(this, value);
    };

    var originalPrepend = $.fn.prepend;
    $.fn.prepend = function(value) {
        checkValToSetLang(value);
        return originalPrepend.call(this, value);
    };

    var originalAppenTo = $.fn.appendTo;
    $.fn.appendTo = function(value) {
        checkValToSetLang(value);
        return originalAppenTo.call(this, value);
    };

    var originalPrependTo = $.fn.prependTo;
    $.fn.prependTo = function(value) {
        checkValToSetLang(value);
        return originalPrependTo.call(this, value);
    };
    /*
    var originalHTML = $.fn.html;
    $.fn.html = function(value) {
        if (typeof value != 'undefined') {
            checkValToSetLang(value);
            return originalHTML(value);
        } else {
            return $(this)[0].innerHTML;
        }
    };
    */
}


// Render Action:
//1. append
//2. prepend
//3. html

var tplJS = {
    tplRender: function(pageID, contentID, renderAction, HTMLContent) {
        if (pageID == null) {
            if (renderAction === "append") {
                $("body").append(HTMLContent);
            } else if (renderAction === "prepend") {
                $("body").prepend(HTMLContent);
            } else if (renderAction === "html") {
                $("body").html(HTMLContent);
            }
        } else {
            if (renderAction === "append") {
                $("#" + pageID + " #" + contentID).append(HTMLContent);
            } else if (renderAction === "prepend") {
                $("#" + pageID + " #" + contentID).prepend(HTMLContent);
            } else if (renderAction === "html") {
                $("#" + pageID + " #" + contentID).html(HTMLContent);
            }
        }

        this.setMultiLanguage(HTMLContent);
    },
    setDOMAttr: function(dom, data) {
        $.each(data, function(key, value) {
            if (key === "class") {
                dom.addClass(value);
            } else {
                dom.prop(key, value);
            }
        });
    },
    setMultiLanguage: function(dom) {
        if ($(dom).find(".langStr").length > 0) {
            $(dom).find(".langStr").each(function(index, element) {
                var id = $(element).data("id");
                $(element).html(langStr[id]);
            });
        }
    },
    getRealContentHeight: function() {
        var header = $.mobile.activePage.find("div[data-role='header']:visible");
        var footer = $.mobile.activePage.find("div[data-role='footer']:visible");
        //var content = $.mobile.activePage.find("div[data-role='content']:visible:visible");
        var content = $.mobile.activePage.find("div[data-role='main']:visible:visible");
        var viewport_height = $(window).height();

        var content_height = viewport_height - header.outerHeight();

        if ((content.outerHeight() - header.outerHeight() - footer.outerHeight()) <= viewport_height) {
            //content_height -= (content.outerHeight() - content.height());
        }

        return content_height;
    },
    preventPageScroll: function() {
        //Prevent Background Page to be scroll, when Option Popup is shown,
        //Change the [height / overflow-y] of Background Page,
        //And then, when Option Popup is close, recovery the [height / overflow-y] of Background Page.
        /*
        var adjustHeight = this.getRealContentHeight();
        var adjustPaddingBottom = 0;

        if (device.platform === "iOS") {
            adjustPaddingBottom = 20;
        }

        $.mobile.activePage.outerHeight(adjustHeight);

        $.mobile.activePage.css({
            "height": adjustHeight,
            "min-height": adjustHeight,
            "padding-bottom": adjustPaddingBottom + "px",
            "overflow-y": "hidden"
        });

        if (checkPopupShown()) {
            var header = $.mobile.activePage.find("div[data-role='header']:visible");
            var popupScreenHeight = adjustHeight + header.outerHeight();

            if (device.platform === "iOS") {
                popupScreenHeight += 20;
            }

            $(".ui-popup-screen.in").height(popupScreenHeight);
        }
        */
        tplJS.originalScrollTop = $("body").scrollTop();
        tplJS.originalUIPageHeight = $(".ui-page-active.ui-page").height();
        tplJS.originalUIPageScrollHeight = $("body").prop("scrollHeight");
        tplJS.originalUIPageMinHeight = parseInt($(".ui-page-active.ui-page").css("min-height"), 10);
        tplJS.originalPageMainHeight = $(".ui-page-active .page-main").height();
        tplJS.originalUITabsHeight = $(".ui-page-active .ui-tabs").height();
        var windowHeight = $(window).height();
        var headerHeight = $(".ui-page-active .ui-header").height();
        var footerHeight = $(".ui-page-active .ui-footer").height();
        var tempHeight = windowHeight - headerHeight - footerHeight;

        if (tplJS.originalPageMainHeight < tempHeight) {
            tplJS.originalPageMainHeight = tempHeight;
        }
        if (tplJS.originalUITabsHeight < tempHeight) {
            tplJS.originalUITabsHeight = tempHeight;
        }
        tplJS.originalUIPageScrollHeight = tplJS.originalUIPageScrollHeight - headerHeight - footerHeight;

        $('.ui-page-active.ui-page, .ui-page-active .page-main, .ui-page-active .ui-tabs').css({
            'height': tempHeight,
            'overflow-y': 'hidden',
            'touch-action': 'none'
        });

        $('.ui-page-active.ui-page').css({
            'min-height': tempHeight
        });

        $('body').css('overflow', 'hidden').on('touchmove', function(e) {
            var preventScroll = true;
            var offsetParent = e.target.offsetParent;

            if ($(offsetParent).hasClass("ui-datebox-container")) {
                preventScroll = false;
            } else if ($(e.target).closest(".ui-popup").length > 0) {
                var headerLength = $(e.target).closest(".header").length;
                var footerLength = $(e.target).closest(".footer").length;
                var listview = $(offsetParent).find("ul[data-role=listview]");

                if ($(listview).prop("scrollHeight") > parseInt($(listview).height() + 6, 10)) {
                    preventScroll = false;
                }
                if (footerLength > 0) {
                    preventScroll = true;
                }
                if (headerLength > 0) {
                    preventScroll = true;
                }
            }

            //For QForum
            if ($(e.target).hasClass("QForum-Content")) {
                $(e.target).css({
                    'touch-action': 'auto'
                });

                $('html, body').animate({
                    scrollTop: 0
                }, 0);
            }

            if (preventScroll) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
    },
    recoveryPageScroll: function() {
        //Padding
        /*
        var paddingTop = parseInt($.mobile.activePage.css("padding-top"), 10);
        var paddingBottom = parseInt($.mobile.activePage.css("padding-bottom"), 10);

        var header = $.mobile.activePage.find("div[data-role='header']:visible");
        var footer = $.mobile.activePage.find("div[data-role='footer']:visible");
        var originalHeight = $.mobile.activePage.outerHeight() - paddingTop - paddingBottom + header.outerHeight() + footer.outerHeight();

        $.mobile.activePage.outerHeight($.mobile.activePage.outerHeight());

        $.mobile.activePage.css({
            "height": originalHeight,
            "padding-bottom": 0,
            "overflow-y": "auto"
        });
        */

        $('body').css('overflow', 'auto').off('touchmove');
        $('.ui-page-active.ui-page').css({
            'height': tplJS.originalUIPageScrollHeight,
            'min-height': tplJS.originalUIPageMinHeight
        });
        $('.ui-page-active .page-main').css({
            'height': tplJS.originalPageMainHeight
        });
        $('.ui-page-active .ui-tabs').css({
            'height': tplJS.originalUITabsHeight
        });
        $('.ui-page-active.ui-page, .ui-page-active .page-main, .ui-page-active .ui-tabs').css({
            'overflow-y': 'auto',
            'touch-action': 'auto'
        });
        $('html, body').animate({
            scrollTop: tplJS.originalScrollTop
        }, 0);
    },
    Tab: function(pageID, contentID, renderAction, data) {
        var tabHTML = $("template#tplTab").html();
        var tab = $(tabHTML);

        //Navbar
        this.Navbar(null, null, null, data.navbar, tab);

        //Tab Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(tab, data.attr);
        }

        //Tab content
        var tabContentHTML = tab.find("template#tplTabContent").html();

        for (var i = 0; i < data.content.length; i++) {
            var tabContent = $(tabContentHTML);
            tabContent.prop("id", data.content[i].id);

            //Set Attr
            this.setDOMAttr(tabContent, data.content[i].attr);
            tab.append(tabContent);
        }

        //Initial Tab
        tab.tabs();

        //Render Template
        this.tplRender(pageID, contentID, renderAction, tab);
    },
    Navbar: function(pageID, contentID, renderAction, data, dom) {
        //Navbar can be created:
        //1. append inside [ Tab ]
        //2. just display button group
        pageID = pageID || null;
        contentID = contentID || null;
        renderAction = renderAction || null;
        dom = dom || null;

        var navbarHTML = $("template#tplNavbar").html();
        var navbar = $(navbarHTML);

        //Navbar Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(navbar, data.attr);
        }

        //Nvrbar button
        var navbarButtonHTML = navbar.find("template#tplNavbarButton").html();
        navbar.find("ul").empty();

        for (var i = 0; i < data.button.length; i++) {
            var navbarButton = $(navbarButtonHTML);
            var className;

            if (i === 0) {
                //First Button
                className = "ui-btn-active tpl-navbar-button-left";
            } else if (i === parseInt(data.button.length - 1, 10)) {
                //Last Button
                className = "tpl-navbar-button-right";
            }

            if (data.button[i].href !== undefined && data.button[i].href.length > 0) {
                navbarButton.find("a").prop("href", "#" + data.button[i].href);
            }

            navbarButton.find("a").addClass(className);
            navbarButton.find("a").html(data.button[i].text);

            //Set Attr
            if (data.button[i].attr !== undefined) {
                this.setDOMAttr(navbarButton.find("a"), data.button[i].attr);
            }

            navbar.find("ul").append(navbarButton);
        }

        //Initial Navbar
        navbar.navbar();

        if (dom !== null) {
            //Append to DOM
            dom.append(navbar);
        } else {
            //Render Template
            this.tplRender(pageID, contentID, renderAction, navbar);
        }
    },
    DropdownList: function(pageID, contentID, renderAction, type, data) {
        var dropdownListHTML = $("template#tplDropdownList").html();
        var dropdownList = $(dropdownListHTML);

        //DropdownList ID
        dropdownList.prop("id", data.id);

        //DropdownList Default Selected Option Value
        var defaultValue = "";
        if (data.defaultValue !== undefined) {
            defaultValue = data.defaultValue;
            $("#" + data.id).data("multiVal", defaultValue);
        }

        //DropdownList AutoResize
        var autoResize = true;
        if (data.autoResize !== undefined) {
            autoResize = data.autoResize;
        }

        //DropdownList Multiple Select
        var multiSelect = false;
        if (data.multiSelect !== undefined) {
            multiSelect = data.multiSelect;
            dropdownList.data("multiple", multiSelect);
        }


        var changeDefaultText = false;
        if (data.changeDefaultText !== undefined) {
            changeDefaultText = data.changeDefaultText;
        }

        //DropdownList Background IMG
        if (type === "typeB") {
            dropdownList.addClass("tpl-dropdown-list-icon-add");
        }

        //DropdownList Attr
        if (data.attr !== undefined) {
            this.setDOMAttr(dropdownList, data.attr);
        }

        //DropdownList Option
        var dropdownListOptionHTML = dropdownList.find("template#tplDropdownListOption").html();

        if (type === "typeA") {
            for (var i = 0; i < data.option.length; i++) {
                var dropdownListOption = $(dropdownListOptionHTML);

                dropdownListOption.prop("value", data.option[i].value);
                dropdownListOption.prop("text", data.option[i].text);

                if (defaultValue == data.option[i].value) {
                    dropdownListOption.prop("selected", "selected");
                }

                dropdownList.append(dropdownListOption);
            }
        } else if (type === "typeB") {
            var dropdownListOption = $(dropdownListOptionHTML);
            dropdownListOption.prop("text", data.defaultText);
            dropdownList.append(dropdownListOption);
        }

        //Render Template
        this.tplRender(pageID, contentID, renderAction, dropdownList);

        //Option in Popup
        var popupHTML = $("template#tplPopup").html();
        var popup = $(popupHTML);
        var popupID = data.id + "-option";
        var dropdownListUlID = data.id + "-option-list";

        popup.find("div[data-role='main']").html("");
        popup.prop("id", popupID);

        var dropdownListOptionHTML = $("template#tplPopupContentDropdownListOption").html();
        var dropdownList = $(dropdownListOptionHTML);

        //Header: typeA / typeB
        var dropdownListHeader = dropdownList.siblings(".header." + type);
        if (type === "typeB") {
            dropdownListHeader.find(".title").html(data.title);
        }

        var dropdownListUl = dropdownList.siblings(".main");

        dropdownListUl.prop("id", dropdownListUlID);

        var dropdownListLiHTML = dropdownList.find("template#tplPopupContentDropdownListLi").html();
        var dropdownListHrHTML = dropdownList.find("template#tplPopupContentDropdownListHr").html();

        for (var i = 0; i < data.option.length; i++) {
            var dropdownListLi = $(dropdownListLiHTML);
            dropdownListLi.data("value", data.option[i].value);
            dropdownListLi.html(data.option[i].text);
            dropdownListUl.append(dropdownListLi);

            if (defaultValue == data.option[i].value) {
                dropdownListLi.addClass("tpl-dropdown-list-selected");
            }

            if (i !== parseInt(data.option.length - 1, 10)) {
                var dropdownListHr = $(dropdownListHrHTML);
                dropdownListHr.addClass("ui-hr-option");
                dropdownListUl.append(dropdownListHr);
            }
        }

        popup.find("div[data-role='main']").append(dropdownListHeader);
        popup.find("div[data-role='main']").append(dropdownListUl);

        //Render Template
        this.tplRender(pageID, contentID, renderAction, popup);

        //When Popup open, Auto Resize height of Popup main,
        //and change height of page, prevent User to scroll the page behind Popup.
        $(document).one("popupafteropen", "#" + popupID, function() {
            var popup = $(this);
            var popupHeight = popup.height();
            var popupHeaderHeight = $("#" + popupID + " .header").height();
            var popupFooterHeight = popup.find("div[data-role='main'] .footer").height();

            //ui-content paddint-top/padding-bottom:3.07vw
            var uiContentPaddingHeight = parseInt(document.documentElement.clientWidth * 3.07 * 2 / 100, 10);

            //Ul margin-top:2.17vw
            var ulMarginTop = parseInt(document.documentElement.clientWidth * 2.17 / 100, 10);

            var popupMainHeight = parseInt(popupHeight - popupHeaderHeight - popupFooterHeight - uiContentPaddingHeight - ulMarginTop, 10);
            $(this).find("div[data-role='main'] .main").height(popupMainHeight);
            $(this).find("div[data-role='main'] .main ul").height(popupMainHeight);

            if (device.platform === "Android") {
                var marginTop = 0;
            } else {
                var marginTop = 20;
            }

            $('.ui-popup-screen.in').animate({
                'overflow-y': 'hidden',
                'touch-action': 'none',
                'height': $(window).height(),
                'margin-top': marginTop + 'px'
            }, 0, function() {
                var top = $(".ui-popup-screen.in").offset().top;
                if (top < 0) {
                    $('.ui-popup-screen.in').css({
                        'top': Math.abs(top) + "px"
                    });
                }
            });

            var viewHeight = $(window).height();
            var popupHeight = $(this).outerHeight();
            var top = (viewHeight - popupHeight) / 2;
            $(this).parent().css("top", top + "px");
        });

        $(document).off("popupbeforeposition", "#" + popupID);
        $(document).on("popupbeforeposition", "#" + popupID, function() {
            tplJS.preventPageScroll();

            if (device.platform === "iOS") {
                $("body").animate({
                    "scrollTop": 0
                }, 0);
            }
        });

        //For data-dismissible=true
        $(document).on("popupafterclose", "#" + popupID, function() {
            tplJS.recoveryPageScroll();
        });

        //Initialize Popup
        $('#' + popupID).popup();

        $(document).on("click", "#" + data.id, function() {
            $('#' + popupID).popup('open');
        });

        (function(dropdownListID) {
            $(document).on("click", "#" + popupID + " .close", function() {
                if (type === "typeA") {
                    if (multiSelect) {
                        $("#" + dropdownListID).trigger("change");
                    }
                }

                $('#' + popupID).popup('close');

                if (type === "typeA") {
                    if (autoResize) {
                        tplJS.reSizeDropdownList(dropdownListID, type);
                    }
                }
                tplJS.recoveryPageScroll();
            });
        }(data.id));

        //Click Li to change the value of Dropdown List
        (function(dropdownListID) {
            $(document).on("click", "#" + popupID + " ul li", function() {
                if (!multiSelect) {
                    $("#" + popupID + " ul li").removeClass("tpl-dropdown-list-selected");
                    $(this).addClass("tpl-dropdown-list-selected");
                } else {
                    $(this).toggleClass("tpl-dropdown-list-selected");
                }

                if (type === "typeA") {
                    if (!multiSelect) {
                        $("#" + dropdownListID).val($(this).data("value"));
                        if (autoResize) {
                            tplJS.reSizeDropdownList(dropdownListID, type);
                        }
                    } else {
                        //Drowdown List set Multiple Value
                        var multiVal = $("#" + dropdownListID).data("multiVal");
                        if (multiVal !== undefined && multiVal.length > 0) {
                            var dataString = "";
                            var selectAll = false;
                            var dataArray = multiVal.split("|");
                            var optionValue = $(this).data("value");
                            var index = dataArray.indexOf(optionValue);
                            var indexAll = dataArray.indexOf("all");

                            if (optionValue === "all") {
                                if (indexAll === -1) {
                                    selectAll = true;
                                } else {
                                    dataArray.splice(indexAll, 1);
                                }
                            } else {
                                if (index > -1) {
                                    dataArray.splice(index, 1);
                                } else {
                                    dataArray.push($(this).data("value"));

                                    if (indexAll > -1) {
                                        dataArray.splice(indexAll, 1);
                                    }
                                }
                            }

                            if (selectAll) {
                                $("#" + dropdownListID).data("multiVal", "all");
                                $("#" + popupID + " ul li").removeClass("tpl-dropdown-list-selected");
                                $("#" + popupID + " ul li:eq(0)").addClass("tpl-dropdown-list-selected");
                            } else {
                                $("#" + popupID + " ul li:eq(0)").removeClass("tpl-dropdown-list-selected");

                                if (dataArray.length > 0) {
                                    dataString = dataArray.join("|");
                                }
                                $("#" + dropdownListID).data("multiVal", dataString);
                            }

                        } else {
                            $("#" + dropdownListID).data("multiVal", $(this).data("value"));
                        }
                    }
                } else if (type === "typeB") {
                    //Find drowdown list, set selected option value
                    var defaultText;
                    if (!changeDefaultText) {
                        $("#" + dropdownListID + " option").each(function(index, el) {
                            if (index === 0) {
                                defaultText = $(el).text();
                            }
                        });
                    } else {
                        $("#" + dropdownListUlID + " li").each(function(index, value) {
                            if ($(value).hasClass("tpl-dropdown-list-selected")) {
                                if ($(value).find('div:nth-child(2)').text() === "") {
                                    defaultText = $(value).text();
                                } else {
                                    defaultText = $(value).find('div:nth-child(2)').text();
                                }
                            }
                        });
                    }

                    var newOption = '<option value="' + $(this).data("value") + '" hidden selected>' + defaultText + '</option>';
                    $("#" + dropdownListID).find("option").remove().end().append(newOption);
                    tplJS.reSizeDropdownList(dropdownListID, type);
                }

                if (!multiSelect) {
                    //Trigger drowdown list 'change' event
                    $("#" + dropdownListID).trigger("change");

                    //Close Popup
                    $('#' + popupID).popup('close');

                    tplJS.recoveryPageScroll();
                }
            });
        }(data.id));

        //Auto Resize DropdownList Width
        this.reSizeDropdownList = function(ID, type, setWidth) {
            type = type || null;
            var tempWidth;
            //Background Image Width
            var imgWidth;

            if (type === "typeA") {
                tempWidth = 3.54;
                imgWidth = 8;
            } else if (type === "typeB") {
                tempWidth = 4.04;
                imgWidth = 5;
            }

            if (type !== null) {
                $("span[data-id='tmp_option_width']").html($('#' + ID + ' option:selected').text());
                var pxWidth = $("span[data-id='tmp_option_width']").outerWidth();
                //px conver to vw
                var vwWidth = (100 / document.documentElement.clientWidth) * pxWidth + tempWidth + imgWidth;
                $("#" + ID).css('width', vwWidth + 'vw');
            } else {
                $("#" + ID).css('width', setWidth + 'vw');
            }
        };

        this.reSizeDropdownList(data.id, type);

    },
    Popup: function(pageID, contentID, renderAction, data) {
        var showMain = false;
        var popupHTML = $("template#tplPopup").html();
        var popup = $(popupHTML);
        var HRHTML = $("template#tplPopupContentHr").html();

        //Popup ID
        popup.prop("id", data.id);
        popup.addClass("msg");

        //Popup Content
        var contentHTML = data.content;
        var content = $(contentHTML);

        //Header
        var headerHTML = content.siblings(".header");
        if (headerHTML.length !== 0) {
            var header = headerHTML.clone();

            popup.find("div.header").append(header);
        }

        //Main
        var mainHTML = content.siblings(".main");
        if (mainHTML.length !== 0) {
            showMain = true;

            //HR Top
            var HRTop = $(HRHTML);
            HRTop.addClass("ui-hr-top");
            popup.find("div.header:first").after(HRTop);

            var main = mainHTML.clone();

            popup.find("div.main").append(main);
        }

        //HR Bottom
        var HRBottom = $(HRHTML);
        HRBottom.addClass("ui-hr-bottom");
        popup.find("div.main:first").after(HRBottom);

        //Footer
        var footerHTML = content.siblings(".footer");
        if (footerHTML.length !== 0) {
            var footer = footerHTML.clone();

            popup.find("div.footer").append(footer);
        }

        //Render Template
        this.tplRender(pageID, contentID, renderAction, popup);

        //Initialize Popup
        $('#' + data.id).popup();

        $(document).one("popupafteropen", "#" + data.id, function() {
            var popupHeight = popup.height();
            var popupHeaderHeight = popup.find("div[data-role='main'] .header").height();
            var popupFooter = popup.find("div[data-role='main'] .footer")[0];
            var popupFooterHeight = popupFooter.offsetHeight;

            //ui-content paddint-top:5.07vw
            var uiContentPaddingHeight = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Ul margin-top:5.07vw
            var ulMarginTop = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Ul margin-bottom:5.07vw
            var ulMarginBottom = parseInt(document.documentElement.clientWidth * 5.07 / 100, 10);

            //Resize Height of Main
            if (showMain) {
                var popupMainHeight = parseInt(popupHeight - popupHeaderHeight - popupFooterHeight - uiContentPaddingHeight - ulMarginTop - ulMarginBottom, 10);
                $(this).find("div[data-role='main'] .main").height(popupMainHeight);
                $(this).find("div[data-role='main'] .main ul").height(popupMainHeight);
            } else {
                $(this).find("div[data-role='main'].ui-content").css("padding-top", "0");
                $(this).find("div[data-role='main'] .main").height(0);
                var popupHeaderHeight = parseInt(popupHeight - popupFooterHeight, 10);
                $(this).find("div[data-role='main'] > .header").height(popupHeaderHeight);
                $(this).find("div[data-role='main'] .header .header").addClass("all-center");
            }
        });

        $(document).on("popupafteropen", "#" + data.id, function() {

            if (device.platform === "Android") {
                var marginTop = 0;
            } else {
                var marginTop = 20;
            }

            $('.ui-popup-screen.in').animate({
                'overflow-y': 'hidden',
                'touch-action': 'none',
                'height': $(window).height(),
                'margin-top': marginTop + 'px'
            }, 0, function() {
                var top = $(".ui-popup-screen.in").offset().top;
                if (top < 0) {
                    $('.ui-popup-screen.in').css({
                        'top': Math.abs(top) + "px"
                    });
                }
            });

            var viewHeight = $(window).height();
            var popupHeight = $(this).outerHeight();
            var top = (viewHeight - popupHeight) / 2;
            $(this).parent().css("top", top + "px");

            if (device.platform === "iOS") {
                $("body").animate({
                    "scrollTop": 0
                }, 0);
            }
        });

        $(document).off("popupbeforeposition", "#" + data.id);
        $(document).on("popupbeforeposition", "#" + data.id, function() {
            tplJS.preventPageScroll();
        });

        $(document).on("popupafterclose", "#" + data.id, function() {
            tplJS.recoveryPageScroll();
        });
    }
};


function popupMsgInit(popupClass) {
    $(popupClass).popup(); //initialize the popup
    $(popupClass).show();
    $(popupClass).popup('open');
    popupMsgCloseInit(popupClass);
}

function popupMsgCloseInit(popupClass) {
    $('body').one('click', popupClass + ' .btn-cancel', function() {
        $(popupClass).popup('close');
    });
}